import { extractComponentsFromText } from './src/api/utils.js';

async function validateRegexPatterns() {
  console.log('🔧 REGEX PATTERN VALIDATION FOR BOARD GAME COMPONENTS');
  console.log('='.repeat(70));
  
  // Test various text formats that should match the enhanced patterns
  const testCases = [
    {
      name: 'Standard Format',
      text: '60 cards, 20 tiles, 1 game board, 4 player boards, 12 wooden cubes, 1 figure'
    },\n    {\n      name: 'Abyss Format (with descriptors)',\n      text: '60 Ally cards, 20 Location tiles, 5 Lord cards, 1 Kraken figure, 20 Influence tokens'\n    },\n    {\n      name: 'List Format',\n      text: 'Components: 8 dice, 50 victory point tokens, 4 player mats, 100 coins, 1 first player marker'\n    },\n    {\n      name: 'Detailed Format',\n      text: 'The game includes 24 action tiles, 6 wooden blocks, 30 resource tokens, and 1 scoring track'\n    },\n    {\n      name: 'Mixed Format',\n      text: '- 16 character cards\\n- 32 treasure cards\\n- 8 six-sided dice\\n- 1 game board\\n- 4 player screens'\n    }\n  ];\n  \n  let totalComponentsFound = 0;\n  let totalTestCases = testCases.length;\n  \n  testCases.forEach((testCase, index) => {\n    console.log(`\\n📝 Test ${index + 1}: ${testCase.name}`);\n    console.log(`Text: \"${testCase.text}\"`);\n    \n    try {\n      const components = extractComponentsFromText(testCase.text);\n      \n      if (components && components.length > 0) {\n        console.log(`✅ Found ${components.length} components:`);\n        components.forEach((comp, i) => {\n          console.log(`   ${i + 1}. ${comp.name} ${comp.quantity ? `(${comp.quantity})` : '(no qty)'}`);\n        });\n        \n        totalComponentsFound += components.length;\n        \n        // Analyze component diversity\n        const types = new Set();\n        components.forEach(comp => {\n          const name = comp.name.toLowerCase();\n          if (name.includes('card')) types.add('cards');\n          if (name.includes('tile')) types.add('tiles');\n          if (name.includes('board')) types.add('boards');\n          if (name.includes('token')) types.add('tokens');\n          if (name.includes('dice') || name.includes('die')) types.add('dice');\n          if (name.includes('cube') || name.includes('block')) types.add('cubes');\n          if (name.includes('figure') || name.includes('kraken')) types.add('figures');\n          if (name.includes('coin') || name.includes('money')) types.add('currency');\n          if (name.includes('mat') || name.includes('screen')) types.add('accessories');\n        });\n        \n        console.log(`   🎯 Types detected: ${Array.from(types).join(', ')}`);\n        \n      } else {\n        console.log('❌ No components found');\n      }\n      \n    } catch (error) {\n      console.log('❌ Error:', error.message);\n    }\n  });\n  \n  console.log('\\n' + '='.repeat(70));\n  console.log('📊 REGEX VALIDATION SUMMARY');\n  console.log('='.repeat(70));\n  \n  console.log(`Total test cases: ${totalTestCases}`);\n  console.log(`Total components found: ${totalComponentsFound}`);\n  console.log(`Average per test: ${(totalComponentsFound / totalTestCases).toFixed(1)}`);\n  \n  if (totalComponentsFound >= 15) {\n    console.log('\\n✅ EXCELLENT: Regex patterns working well');\n    console.log('🚀 Should handle diverse board game component formats');\n  } else if (totalComponentsFound >= 8) {\n    console.log('\\n✅ GOOD: Regex patterns working adequately');\n    console.log('⚡ May need minor adjustments for some formats');\n  } else {\n    console.log('\\n⚠️ LIMITED: Regex patterns need improvement');\n    console.log('🔧 Consider enhancing pattern matching');\n  }\n  \n  return totalComponentsFound;\n}\n\n// Test specific problematic patterns\nasync function testProblematicPatterns() {\n  console.log('\\n🔍 TESTING PROBLEMATIC PATTERNS');\n  console.log('='.repeat(50));\n  \n  const problematicTexts = [\n    '- 60 Ally cards',  // Leading dash + descriptor\n    'Contains 20 Location tiles',  // Leading word\n    '1 game board (main)',  // Trailing descriptor\n    '4 player boards for individual use',  // Long trailing text\n    'plastic pearls (60)',  // Quantity at end\n    'Kraken figure (1 large miniature)'  // Complex description\n  ];\n  \n  problematicTexts.forEach((text, i) => {\n    console.log(`\\n🔍 Problematic ${i + 1}: \"${text}\"`);\n    const components = extractComponentsFromText(text);\n    if (components.length > 0) {\n      console.log(`   ✅ Detected: ${components.map(c => c.name).join(', ')}`);\n    } else {\n      console.log('   ❌ No detection');\n    }\n  });\n}\n\n// Main validation function\nasync function runCompleteValidation() {\n  const componentCount = await validateRegexPatterns();\n  await testProblematicPatterns();\n  \n  console.log('\\n' + '='.repeat(70));\n  console.log('🎯 ENHANCED COMPONENT DETECTION VALIDATION COMPLETE');\n  console.log('='.repeat(70));\n  \n  console.log('\\n🎲 Key Findings:');\n  console.log(`   📊 Components detected: ${componentCount}`);\n  console.log('   🔧 Regex patterns: Enhanced for board games');\n  console.log('   🎯 Target: Resolve Abyss \"only cards\" issue');\n  \n  if (componentCount >= 10) {\n    console.log('\\n✅ STEP 2 VALIDATION: SUCCESSFUL');\n    console.log('🚀 Enhanced component detection ready for production');\n    console.log('📈 Significant improvement over old system expected');\n  } else {\n    console.log('\\n⚠️ STEP 2 VALIDATION: NEEDS ATTENTION');\n    console.log('🔧 May require pattern refinements');\n  }\n  \n  console.log('\\n📋 Next: Test with real board game PDFs');\n  console.log('🎯 Specifically validate Abyss component detection');\n  \n  return componentCount >= 10;\n}\n\nrunCompleteValidation().catch(console.error);\n