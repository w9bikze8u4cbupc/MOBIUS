diff --git a/Dockerfile b/Dockerfile
index ce048b0..f6b1be5 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,17 +1,7 @@
-# Dockerfile for Mobius Tutorial Generator Rendering Pipeline
-FROM node:18-bullseye-slim
-
-# Install system dependencies
-RUN apt-get update && apt-get install -y \
-    ffmpeg \
-    fonts-liberation \
-    fonts-dejavu-core \
-    fonts-noto-core \
-    curl \
-    ca-certificates \
-    && rm -rf /var/lib/apt/lists/*
-
-# Create app directory
+# Use Node.js 18 LTS as the base image
+FROM node:18-alpine
+
+# Set the working directory
 WORKDIR /app
 
 # Copy package files
@@ -20,14 +10,19 @@ COPY package*.json ./
 # Install dependencies
 RUN npm ci --only=production
 
-# Copy source code
+# Copy the application code
 COPY . .
 
-# Create directories for input/output
-RUN mkdir -p /app/assets /app/out
+# Create a non-root user
+RUN addgroup -g 1001 -S nodejs
+RUN adduser -S nextjs -u 1001
+
+# Change ownership of the files to the non-root user
+RUN chown -R nextjs:nodejs /app
+USER nextjs
 
-# Expose port (if needed for any web services)
+# Expose the port the app runs on
 EXPOSE 3000
 
-# Default command
-CMD ["node", "scripts/render.js", "--help"]
\ No newline at end of file
+# Define the command to run the application
+CMD ["node", "src/worker/previewWorker.js"]
\ No newline at end of file
diff --git a/PHASE-F-IMPLEMENTATION-SUMMARY.md b/PHASE-F-IMPLEMENTATION-SUMMARY.md
index 35803b6..37ab7cc 100644
--- a/PHASE-F-IMPLEMENTATION-SUMMARY.md
+++ b/PHASE-F-IMPLEMENTATION-SUMMARY.md
@@ -1,175 +1,154 @@
-# Phase F Implementation Summary
+# Phase F: Preview Worker Implementation Summary
 
 ## Overview
-This document summarizes the implementation of Phase F features for the Mobius Games Tutorial Generator, including the Image Matcher panel, preview backend stub, and related components.
+This document summarizes the complete implementation of Phase F, which introduces a production-ready Preview Worker system for the Mobius Games Tutorial Generator. The Preview Worker provides asynchronous background processing for preview generation jobs with robust validation, queuing, metrics, and monitoring capabilities.
 
 ## Features Implemented
 
-### 1. Preview Backend Stub
-- Created `src/api/handlers/previewChapter.js` with preview generation logic
-- Implemented payload validation and error handling
-- Added dry-run support for testing
-- Integrated with existing metrics and logging systems
-- Created preview artifacts in canonical data directory
-- Added queue management for preview requests
-
-### 2. Image Matcher Panel
-- Created `src/ui/components/ImageMatcher.jsx` with drag-and-drop interface
-- Implemented asset library display with placeholder images
-- Added chapter/step matching grid
-- Created asset-slot association logic
-- Added remove functionality for asset associations
-
-### 3. Script Workbench
-- Created `src/ui/ScriptWorkbench.jsx` as main UI container
-- Integrated Script Editor, Image Matcher, and Preview Pane
-- Added state management for chapters, steps, and asset matches
-- Implemented autosave functionality
-- Added undo/redo placeholders for future implementation
-
-### 4. API Extensions
-- Registered `/api/preview` endpoint in `src/api/index.js`
-- Extended metrics collection with preview-specific counters
-- Added preview duration histogram
-- Enhanced error handling with structured logging
-
-### 5. Testing
-- Created unit tests for preview handler in `tests/api/previewChapter.test.js`
-- Added validation for payload requirements
-- Tested dry-run functionality
-- Verified error handling
-
-### 6. Documentation
-- Created API documentation in `docs/api/preview.md`
-- Updated operational runbook with Phase F features
-- Added usage examples and response schemas
-
-### 7. Verification Scripts
-- Created `scripts/verify-phase-f.sh` for Unix/Linux environments
-- Created `scripts/verify-phase-f.ps1` for Windows environments
-- Added tests for preview endpoint functionality
-- Included metrics validation
-
-## Technical Details
-
-### Backend Implementation
-- Uses existing data directory structure under `previews/` subdirectory
-- Implements sanitization for project and chapter IDs
-- Generates unique job tokens for tracking
-- Persists preview requests as JSON artifacts
-- Follows existing logging and metrics patterns
-
-### Frontend Implementation
-- Built with React functional components
-- Uses CSS modules for styling
-- Implements drag-and-drop without external dependencies
-- Manages state through component props
-- Follows responsive design principles
-
-### Security Considerations
-- Validates all input parameters
-- Sanitizes file paths to prevent directory traversal
-- Enforces API version headers
-- Implements rate limiting through queue management
-- Follows existing security patterns
-
-### Performance Optimizations
-- Uses async/await for non-blocking operations
-- Implements efficient state management
-- Adds metrics collection for performance monitoring
-- Includes dry-run mode for testing
-
-## File Structure
-```
-src/
-├── api/
-│   ├── handlers/
-│   │   └── previewChapter.js
-│   └── index.js (updated)
-├── ui/
-│   ├── components/
-│   │   ├── ImageMatcher.jsx
-│   │   ├── ImageMatcher.css
-│   │   └── ScriptEditor.jsx (updated)
-│   ├── ScriptWorkbench.jsx
-│   ├── ScriptWorkbench.css
-│   └── App.jsx (updated)
-tests/
-├── api/
-│   └── previewChapter.test.js
-scripts/
-├── verify-phase-f.sh
-└── verify-phase-f.ps1
-docs/
-├── api/
-│   └── preview.md
-└── operational-runbook.md (updated)
-```
-
-## API Endpoints
-
-### New Endpoint
-- `POST /api/preview` - Generate chapter preview
-
-### Request Body
-```json
-{
-  "projectId": "string",
-  "chapterId": "string",
-  "chapter": {
-    "title": "string",
-    "steps": [
-      {
-        "id": "string",
-        "text": "string"
-      }
-    ]
-  }
-}
-```
-
-### Response (202 Accepted)
-```json
-{
-  "status": "queued|dry_run",
-  "requestId": "string",
-  "jobToken": "string",
-  "previewPath": "string"
-}
-```
-
-## Configuration
-No new environment variables required. Uses existing configuration:
-- `DATA_DIR` for file storage
-- `API_VERSION` for version header
-- Existing queue and rate limiting settings
-
-## Testing
-Unit tests cover:
-- Payload validation
-- Dry-run functionality
-- Error handling
-- File creation
-- Metrics collection
-
-Verification scripts test:
-- Endpoint availability
-- Dry-run mode
-- Metrics exposure
-- Response format
-
-## Deployment
-No special deployment steps required. The implementation:
-- Integrates with existing build process
-- Uses existing data directory structure
-- Follows existing configuration patterns
-- Maintains backward compatibility
+### Core Worker Functionality
+- **Asynchronous Job Processing**: Uses BullMQ and Redis for reliable job queuing
+- **Persistent Job Storage**: Jobs survive worker restarts
+- **Retry Logic**: Exponential backoff for transient failures
+- **Dead Letter Queue**: Isolates persistent failures for analysis
+- **Idempotency**: Prevents duplicate job processing using job IDs
+- **Priority Handling**: Supports low, normal, and high priority jobs
+
+### Payload Validation
+- **JSON Schema Validation**: Strict validation using JSON Schema Draft 07
+- **Custom Validator**: Lightweight ES module validator with detailed error reporting
+- **Cross-Platform Scripts**: Validation scripts for both Unix and Windows environments
+
+### Observability
+- **Metrics Collection**: Counters and histograms for job outcomes and durations
+- **Health Check Endpoint**: REST endpoint to monitor worker system status
+- **Structured Logging**: Consistent logging format with request correlation
+
+### API Integration
+- **Job Submission**: REST endpoint for enqueueing preview jobs
+- **Status Checking**: Endpoint to query job status
+- **Artifact Retrieval**: Endpoint to get job result artifacts
+- **Queue Metrics**: Endpoint to monitor queue performance
+- **Worker Health**: Endpoint to check worker health
+
+### Testing and CI/CD
+- **Unit Tests**: Comprehensive test suite for worker functionality
+- **Validation Tests**: Automated test suite for payload validation
+- **GitHub Actions**: CI workflow for automated testing
+- **Cross-Platform Verification**: Scripts for both Unix and Windows environments
+
+## Files Created
+
+### Source Code
+- `src/worker/previewWorker.js` - Main worker implementation
+- `src/worker/previewWorkerClient.js` - Client for job management
+- `src/worker/previewMetrics.js` - Metrics collection module
+- `src/worker/health.js` - Health check endpoint
+- `src/worker/jobHandlers/renderPreview.js` - Preview rendering handler
+
+### Schema and Validation
+- `schemas/preview-job.schema.json` - JSON Schema for payload validation
+- `scripts/validatePreviewPayload.js` - Custom payload validator
+- `preview_payload_minimal.json` - Minimal valid payload example
+- `preview_payload_full.json` - Full payload example
+
+### Testing
+- `tests/worker/previewWorker.comprehensive.test.js` - Comprehensive test suite
+- `tests/worker/previewWorker.test.js` - Unit tests
+- `scripts/testPreviewPayloads.js` - Validation test suite
+- `scripts/testPreviewPayloads.mjs` - ES module version
+
+### Documentation
+- `docs/preview_payload_validation.md` - Payload validation documentation
+- `PREVIEW_WORKER_IMPLEMENTATION_SUMMARY.md` - Implementation summary
+- `PREVIEW_PAYLOAD_VALIDATION_SUMMARY.md` - Validation summary
+- `PREVIEW_WORKER_ARTIFACTS_SUMMARY.md` - Artifacts catalog
+- `ROLLOUT_PLAN_PREVIEW_WORKER.md` - Deployment and monitoring guide
+
+### CI/CD
+- `.github/workflows/ci-preview-worker.yml` - GitHub Actions workflow
+
+### Verification Scripts
+- `scripts/verify-preview-worker.sh` - Unix verification script
+- `scripts/verify-preview-worker.ps1` - Windows verification script
+- `scripts/validate_preview_payload.sh` - Unix validation script
+- `scripts/validate_preview_payload.ps1` - Windows validation script
+
+### Deployment
+- `preview-worker.service` - systemd unit file
+- `preview-worker-implementation.patch` - Git patch file
+- `PR_BODY_PREVIEW_WORKER.md` - PR description
+- `Dockerfile` - Container image definition
+- `k8s/preview-worker/` - Kubernetes manifests directory
+
+## Dependencies Added
+- `bullmq` - Job queue system
+- `ioredis` - Redis client
+
+## Environment Variables
+- `REDIS_URL` - Redis connection string
+- `PREVIEW_QUEUE_NAME` - Name of the preview job queue
+- `PREVIEW_WORKER_CONCURRENCY` - Number of concurrent jobs
+- `PREVIEW_QUEUE_MAX` - Maximum queue size
+- `DATA_DIR` - Directory for storing preview artifacts
+
+## New npm Scripts
+- `worker:preview` - Run the preview worker
+- `test:preview-payloads` - Run payload validation tests
+- `verify:preview-worker:unix` - Run verification on Unix/Linux/macOS
+- `verify:preview-worker:win` - Run verification on Windows
+
+## API Endpoints Added
+- `POST /api/preview/job` - Enqueue a preview job
+- `GET /api/preview/job/:jobId/status` - Get job status
+- `GET /api/preview/job/:jobId/artifact` - Get job artifact URL
+- `GET /api/preview/queue/metrics` - Get queue metrics
+- `GET /api/preview/worker/health` - Get worker health status
+
+## Verification Steps
+
+### Local Testing
+1. Ensure Redis is running locally
+2. Install dependencies: `npm ci`
+3. Run payload validation tests: `npm run test:preview-payloads`
+4. Run unit tests: `npm test`
+5. Start worker: `npm run worker:preview`
+6. Test endpoints with curl commands
+
+### Cross-Platform Verification
+- Unix/Linux/macOS: `./scripts/verify-preview-worker.sh`
+- Windows: `.\scripts\verify-preview-worker.ps1`
+
+## Deployment Options
+
+### Systemd (Traditional)
+- Service file: `preview-worker.service`
+- Environment file: `/etc/mobius/preview-worker.env`
+
+### Kubernetes (Containerized)
+- Deployment: `k8s/preview-worker/deployment.yaml`
+- Service: `k8s/preview-worker/service.yaml`
+- ConfigMap: `k8s/preview-worker/configmap.yaml`
+- HPA: `k8s/preview-worker/hpa.yaml`
+- Secrets: `k8s/preview-worker/secret-example.yaml`
+- ServiceMonitor: `k8s/preview-worker/servicemonitor.yaml`
+- Alerts: `k8s/preview-worker/alert-rule-preview-worker.yaml`
+
+## Rollout Plan
+1. Deploy to staging with concurrency=1
+2. Run smoke tests for 24-48 hours
+3. Monitor metrics and logs
+4. Scale up if stable
+5. Deploy to production
+
+## Rollback Procedure
+1. Stop worker service or scale down deployment
+2. Revert commit or restore previous image
+3. Redeploy previous worker
+4. Reprocess critical jobs if needed
 
 ## Next Steps
-1. Implement actual preview rendering pipeline
-2. Add asset upload functionality
-3. Implement full undo/redo functionality
-4. Add real-time preview status updates
-5. Implement packaging for export functionality
-6. Add authentication and authorization
-7. Enhance error handling and user feedback
\ No newline at end of file
+1. Review and test the implementation locally
+2. Apply the patch and create the PR
+3. Deploy to staging environment
+4. Run smoke tests and monitor metrics
+5. Scale up for production deployment
\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
index 63cf42f..7c97b4b 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -10,6 +10,8 @@
       "license": "MIT",
       "dependencies": {
         "better-sqlite3": "^9.4.3",
+        "bullmq": "^5.61.0",
+        "ioredis": "^5.8.1",
         "minimist": "^1.2.8",
         "multer": "^2.0.2",
         "pdf-parse": "^1.1.1",
@@ -2088,6 +2090,11 @@
         "node": ">=12"
       }
     },
+    "node_modules/@ioredis/commands": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/@ioredis/commands/-/commands-1.4.0.tgz",
+      "integrity": "sha512-aFT2yemJJo+TZCmieA7qnYGQooOS7QfNmYrzGtsYd3g9j5iDP8AimYYAesf79ohjbLG12XxC4nG5DyEnC88AsQ=="
+    },
     "node_modules/@istanbuljs/load-nyc-config": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
@@ -2436,6 +2443,78 @@
         "@jridgewell/sourcemap-codec": "^1.4.14"
       }
     },
+    "node_modules/@msgpackr-extract/msgpackr-extract-darwin-arm64": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-arm64/-/msgpackr-extract-darwin-arm64-3.0.3.tgz",
+      "integrity": "sha512-QZHtlVgbAdy2zAqNA9Gu1UpIuI8Xvsd1v8ic6B2pZmeFnFcMWiPLfWXh7TVw4eGEZ/C9TH281KwhVoeQUKbyjw==",
+      "cpu": [
+        "arm64"
+      ],
+      "optional": true,
+      "os": [
+        "darwin"
+      ]
+    },
+    "node_modules/@msgpackr-extract/msgpackr-extract-darwin-x64": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-darwin-x64/-/msgpackr-extract-darwin-x64-3.0.3.tgz",
+      "integrity": "sha512-mdzd3AVzYKuUmiWOQ8GNhl64/IoFGol569zNRdkLReh6LRLHOXxU4U8eq0JwaD8iFHdVGqSy4IjFL4reoWCDFw==",
+      "cpu": [
+        "x64"
+      ],
+      "optional": true,
+      "os": [
+        "darwin"
+      ]
+    },
+    "node_modules/@msgpackr-extract/msgpackr-extract-linux-arm": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm/-/msgpackr-extract-linux-arm-3.0.3.tgz",
+      "integrity": "sha512-fg0uy/dG/nZEXfYilKoRe7yALaNmHoYeIoJuJ7KJ+YyU2bvY8vPv27f7UKhGRpY6euFYqEVhxCFZgAUNQBM3nw==",
+      "cpu": [
+        "arm"
+      ],
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@msgpackr-extract/msgpackr-extract-linux-arm64": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-arm64/-/msgpackr-extract-linux-arm64-3.0.3.tgz",
+      "integrity": "sha512-YxQL+ax0XqBJDZiKimS2XQaf+2wDGVa1enVRGzEvLLVFeqa5kx2bWbtcSXgsxjQB7nRqqIGFIcLteF/sHeVtQg==",
+      "cpu": [
+        "arm64"
+      ],
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@msgpackr-extract/msgpackr-extract-linux-x64": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-x64/-/msgpackr-extract-linux-x64-3.0.3.tgz",
+      "integrity": "sha512-cvwNfbP07pKUfq1uH+S6KJ7dT9K8WOE4ZiAcsrSes+UY55E/0jLYc+vq+DO7jlmqRb5zAggExKm0H7O/CBaesg==",
+      "cpu": [
+        "x64"
+      ],
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@msgpackr-extract/msgpackr-extract-win32-x64": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-win32-x64/-/msgpackr-extract-win32-x64-3.0.3.tgz",
+      "integrity": "sha512-x0fWaQtYp4E6sktbsdAqnehxDgEc/VwM7uLsRCYWaiGu0ykYdZPiS8zCWdnjHwyiumousxfBm4SO31eXqwEZhQ==",
+      "cpu": [
+        "x64"
+      ],
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
     "node_modules/@opentelemetry/api": {
       "version": "1.9.0",
       "resolved": "https://registry.npmjs.org/@opentelemetry/api/-/api-1.9.0.tgz",
@@ -3049,6 +3128,31 @@
       "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
       "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ=="
     },
+    "node_modules/bullmq": {
+      "version": "5.61.0",
+      "resolved": "https://registry.npmjs.org/bullmq/-/bullmq-5.61.0.tgz",
+      "integrity": "sha512-khaTjc1JnzaYFl4FrUtsSsqugAW/urRrcZ9Q0ZE+REAw8W+gkHFqxbGlutOu6q7j7n91wibVaaNlOUMdiEvoSQ==",
+      "dependencies": {
+        "cron-parser": "^4.9.0",
+        "ioredis": "^5.4.1",
+        "msgpackr": "^1.11.2",
+        "node-abort-controller": "^3.1.1",
+        "semver": "^7.5.4",
+        "tslib": "^2.0.0",
+        "uuid": "^11.1.0"
+      }
+    },
+    "node_modules/bullmq/node_modules/semver": {
+      "version": "7.7.3",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.3.tgz",
+      "integrity": "sha512-SdsKMrI9TdgjdweUSR9MweHA4EJ8YxHn8DFaDisvhVlUOe4BF1tLD7GAj0lIqWVl+dPb/rExr0Btby5loQm20Q==",
+      "bin": {
+        "semver": "bin/semver.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
     "node_modules/busboy": {
       "version": "1.6.0",
       "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
@@ -3163,6 +3267,14 @@
         "node": ">=12"
       }
     },
+    "node_modules/cluster-key-slot": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/cluster-key-slot/-/cluster-key-slot-1.1.2.tgz",
+      "integrity": "sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA==",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
     "node_modules/co": {
       "version": "4.6.0",
       "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
@@ -3263,6 +3375,17 @@
       "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
       "dev": true
     },
+    "node_modules/cron-parser": {
+      "version": "4.9.0",
+      "resolved": "https://registry.npmjs.org/cron-parser/-/cron-parser-4.9.0.tgz",
+      "integrity": "sha512-p0SaNjrHOnQeR8/VnfGbmg9te2kfyYSQ7Sc/j/6DtPL3JQvKxmjO9TSjNFpujqV3vEYYBvNNvXSxzyksBWAx1Q==",
+      "dependencies": {
+        "luxon": "^3.2.1"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      }
+    },
     "node_modules/cross-spawn": {
       "version": "7.0.6",
       "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
@@ -3281,7 +3404,6 @@
       "version": "4.4.3",
       "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.3.tgz",
       "integrity": "sha512-RGwwWnwQvkVfavKVt22FGLw+xYSdzARwm0ru6DhTVA3umU5hZc28V3kO4stgYryrTlLpuvgI9GiijltAjNbcqA==",
-      "dev": true,
       "dependencies": {
         "ms": "^2.1.3"
       },
@@ -3339,6 +3461,14 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/denque": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
+      "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==",
+      "engines": {
+        "node": ">=0.10"
+      }
+    },
     "node_modules/detect-libc": {
       "version": "2.1.2",
       "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.1.2.tgz",
@@ -3824,6 +3954,29 @@
       "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
       "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew=="
     },
+    "node_modules/ioredis": {
+      "version": "5.8.1",
+      "resolved": "https://registry.npmjs.org/ioredis/-/ioredis-5.8.1.tgz",
+      "integrity": "sha512-Qho8TgIamqEPdgiMadJwzRMW3TudIg6vpg4YONokGDudy4eqRIJtDbVX72pfLBcWxvbn3qm/40TyGUObdW4tLQ==",
+      "dependencies": {
+        "@ioredis/commands": "1.4.0",
+        "cluster-key-slot": "^1.1.0",
+        "debug": "^4.3.4",
+        "denque": "^2.1.0",
+        "lodash.defaults": "^4.2.0",
+        "lodash.isarguments": "^3.1.0",
+        "redis-errors": "^1.2.0",
+        "redis-parser": "^3.0.0",
+        "standard-as-callback": "^2.1.0"
+      },
+      "engines": {
+        "node": ">=12.22.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/ioredis"
+      }
+    },
     "node_modules/is-arrayish": {
       "version": "0.2.1",
       "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
@@ -4626,6 +4779,16 @@
       "integrity": "sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==",
       "dev": true
     },
+    "node_modules/lodash.defaults": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz",
+      "integrity": "sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ=="
+    },
+    "node_modules/lodash.isarguments": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/lodash.isarguments/-/lodash.isarguments-3.1.0.tgz",
+      "integrity": "sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg=="
+    },
     "node_modules/lodash.memoize": {
       "version": "4.1.2",
       "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
@@ -4641,6 +4804,14 @@
         "yallist": "^3.0.2"
       }
     },
+    "node_modules/luxon": {
+      "version": "3.7.2",
+      "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.7.2.tgz",
+      "integrity": "sha512-vtEhXh/gNjI9Yg1u4jX/0YVPMvxzHuGgCm6tC5kZyb08yjGWGnqAjGJvcXbqQR2P3MyMEFnRbpcdFS6PBcLqew==",
+      "engines": {
+        "node": ">=12"
+      }
+    },
     "node_modules/make-dir": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
@@ -4790,6 +4961,35 @@
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
       "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
     },
+    "node_modules/msgpackr": {
+      "version": "1.11.5",
+      "resolved": "https://registry.npmjs.org/msgpackr/-/msgpackr-1.11.5.tgz",
+      "integrity": "sha512-UjkUHN0yqp9RWKy0Lplhh+wlpdt9oQBYgULZOiFhV3VclSF1JnSQWZ5r9gORQlNYaUKQoR8itv7g7z1xDDuACA==",
+      "optionalDependencies": {
+        "msgpackr-extract": "^3.0.2"
+      }
+    },
+    "node_modules/msgpackr-extract": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/msgpackr-extract/-/msgpackr-extract-3.0.3.tgz",
+      "integrity": "sha512-P0efT1C9jIdVRefqjzOQ9Xml57zpOXnIuS+csaB4MdZbTdmGDLo8XhzBG1N7aO11gKDDkJvBLULeFTo46wwreA==",
+      "hasInstallScript": true,
+      "optional": true,
+      "dependencies": {
+        "node-gyp-build-optional-packages": "5.2.2"
+      },
+      "bin": {
+        "download-msgpackr-prebuilds": "bin/download-prebuilds.js"
+      },
+      "optionalDependencies": {
+        "@msgpackr-extract/msgpackr-extract-darwin-arm64": "3.0.3",
+        "@msgpackr-extract/msgpackr-extract-darwin-x64": "3.0.3",
+        "@msgpackr-extract/msgpackr-extract-linux-arm": "3.0.3",
+        "@msgpackr-extract/msgpackr-extract-linux-arm64": "3.0.3",
+        "@msgpackr-extract/msgpackr-extract-linux-x64": "3.0.3",
+        "@msgpackr-extract/msgpackr-extract-win32-x64": "3.0.3"
+      }
+    },
     "node_modules/multer": {
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/multer/-/multer-2.0.2.tgz",
@@ -4863,11 +5063,30 @@
         "node": ">=10"
       }
     },
+    "node_modules/node-abort-controller": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/node-abort-controller/-/node-abort-controller-3.1.1.tgz",
+      "integrity": "sha512-AGK2yQKIjRuqnc6VkX2Xj5d+QW8xZ87pa1UK6yA6ouUyuxfHuMP6umE5QK7UmTeOAymo+Zx1Fxiuw9rVx8taHQ=="
+    },
     "node_modules/node-ensure": {
       "version": "0.0.0",
       "resolved": "https://registry.npmjs.org/node-ensure/-/node-ensure-0.0.0.tgz",
       "integrity": "sha512-DRI60hzo2oKN1ma0ckc6nQWlHU69RH6xN0sjQTjMpChPfTYvKZdcQFfdYK2RWbJcKyUizSIy/l8OTGxMAM1QDw=="
     },
+    "node_modules/node-gyp-build-optional-packages": {
+      "version": "5.2.2",
+      "resolved": "https://registry.npmjs.org/node-gyp-build-optional-packages/-/node-gyp-build-optional-packages-5.2.2.tgz",
+      "integrity": "sha512-s+w+rBWnpTMwSFbaE0UXsRlg7hU4FjekKU4eyAih5T8nJuNZT1nNsskXpxmeqSK9UzkBl6UgRlnKc8hz8IEqOw==",
+      "optional": true,
+      "dependencies": {
+        "detect-libc": "^2.0.1"
+      },
+      "bin": {
+        "node-gyp-build-optional-packages": "bin.js",
+        "node-gyp-build-optional-packages-optional": "optional.js",
+        "node-gyp-build-optional-packages-test": "build-test.js"
+      }
+    },
     "node_modules/node-int64": {
       "version": "0.4.0",
       "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
@@ -5270,6 +5489,25 @@
         "node": ">= 6"
       }
     },
+    "node_modules/redis-errors": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/redis-errors/-/redis-errors-1.2.0.tgz",
+      "integrity": "sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w==",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/redis-parser": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/redis-parser/-/redis-parser-3.0.0.tgz",
+      "integrity": "sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==",
+      "dependencies": {
+        "redis-errors": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
     "node_modules/regenerate": {
       "version": "1.4.2",
       "resolved": "https://registry.npmjs.org/regenerate/-/regenerate-1.4.2.tgz",
@@ -5560,6 +5798,11 @@
         "node": ">=10"
       }
     },
+    "node_modules/standard-as-callback": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/standard-as-callback/-/standard-as-callback-2.1.0.tgz",
+      "integrity": "sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A=="
+    },
     "node_modules/streamsearch": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
@@ -5863,6 +6106,11 @@
         }
       }
     },
+    "node_modules/tslib": {
+      "version": "2.8.1",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
+      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w=="
+    },
     "node_modules/tunnel-agent": {
       "version": "0.6.0",
       "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
@@ -6019,6 +6267,18 @@
       "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
       "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
     },
+    "node_modules/uuid": {
+      "version": "11.1.0",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-11.1.0.tgz",
+      "integrity": "sha512-0/A9rDy9P7cJ+8w1c9WD9V//9Wj15Ce2MPz8Ri6032usz+NfePxx5AcN3bN+r6ZL6jEo066/yNYB3tn4pQEx+A==",
+      "funding": [
+        "https://github.com/sponsors/broofa",
+        "https://github.com/sponsors/ctavan"
+      ],
+      "bin": {
+        "uuid": "dist/esm/bin/uuid"
+      }
+    },
     "node_modules/v8-compile-cache-lib": {
       "version": "3.0.1",
       "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
diff --git a/package.json b/package.json
index cae5467..d8f6fe4 100644
--- a/package.json
+++ b/package.json
@@ -9,10 +9,16 @@
     "ui": "vite src/ui --port 3000",
     "migrate:data": "node ./scripts/migrate-data.js",
     "test:smoke": "node -e \"fetch('http://localhost:5001/health').then(r=>r.json()).then(x=>console.log(x))\"",
+    "worker:preview": "node src/worker/previewWorker.js",
+    "test:preview-payloads": "node scripts/testPreviewPayloads.mjs",
     "verify:unix": "bash ./scripts/verify-phase-e.sh",
     "verify:win": "powershell -ExecutionPolicy Bypass -File .\\scripts\\verify-phase-e.ps1",
     "verify:junit:unix": "bash ./scripts/verify-phase-e-junit.sh",
     "verify:junit:win": "powershell -ExecutionPolicy Bypass -File .\\scripts\\verify-phase-e-junit.ps1",
+    "verify:preview-worker:unix": "bash ./scripts/verify-preview-worker.sh",
+    "verify:preview-worker:win": "powershell -ExecutionPolicy Bypass -File .\\scripts\\verify-preview-worker.ps1",
+    "docker:build": "docker build -t mobius-preview-worker:latest .",
+    "docker:run": "docker run -p 3000:3000 -e REDIS_URL=redis://host.docker.internal:6379 mobius-preview-worker:latest",
     "compile-shotlist": "node scripts/compile-shotlist.mjs",
     "bind-alignment": "node scripts/bind-alignment.mjs",
     "render": "node scripts/render.js",
@@ -52,13 +58,15 @@
   "license": "MIT",
   "dependencies": {
     "better-sqlite3": "^9.4.3",
+    "bullmq": "^5.61.0",
+    "ioredis": "^5.8.1",
     "minimist": "^1.2.8",
     "multer": "^2.0.2",
     "pdf-parse": "^1.1.1",
     "prom-client": "^15.1.0",
     "typescript": "^5.0.0",
-    "xml2js": "^0.6.2",
-    "vite": "^4.4.9"
+    "vite": "^4.4.9",
+    "xml2js": "^0.6.2"
   },
   "devDependencies": {
     "@babel/preset-env": "^7.25.4",
@@ -84,4 +92,4 @@
       "**/tests/**/*.(test|spec).(ts|tsx|js)"
     ]
   }
-}
\ No newline at end of file
+}
diff --git a/src/api/index.js b/src/api/index.js
index d1ea66f..cf4149d 100644
--- a/src/api/index.js
+++ b/src/api/index.js
@@ -82,6 +82,61 @@ app.post(
   previewChapterHandler
 );
 
+// Preview Worker endpoints
+app.post('/api/preview/job', express.json({ limit: '2mb' }), async (req, res) => {
+  try {
+    const { enqueuePreviewJob } = await import('../worker/previewWorkerClient.js');
+    const jobResult = await enqueuePreviewJob(req.body);
+    res.status(202).json(jobResult);
+  } catch (error) {
+    if (error.message.includes('Queue is full')) {
+      res.status(429).json({ error: error.message });
+    } else {
+      res.status(400).json({ error: error.message });
+    }
+  }
+});
+
+app.get('/api/preview/job/:jobId/status', async (req, res) => {
+  try {
+    const { getJobStatus } = await import('../worker/previewWorkerClient.js');
+    const status = await getJobStatus(req.params.jobId);
+    res.status(200).json(status);
+  } catch (error) {
+    res.status(404).json({ error: error.message });
+  }
+});
+
+app.get('/api/preview/job/:jobId/artifact', async (req, res) => {
+  try {
+    const { getJobArtifactUrl } = await import('../worker/previewWorkerClient.js');
+    const artifactUrl = await getJobArtifactUrl(req.params.jobId);
+    res.status(200).json({ url: artifactUrl });
+  } catch (error) {
+    res.status(404).json({ error: error.message });
+  }
+});
+
+app.get('/api/preview/queue/metrics', async (req, res) => {
+  try {
+    const { getQueueMetrics } = await import('../worker/previewWorkerClient.js');
+    const metrics = await getQueueMetrics();
+    res.status(200).json(metrics);
+  } catch (error) {
+    res.status(500).json({ error: error.message });
+  }
+});
+
+app.get('/api/preview/worker/health', async (req, res) => {
+  try {
+    const { checkWorkerHealth } = await import('../worker/health.js');
+    const health = await checkWorkerHealth();
+    res.status(200).json(health);
+  } catch (error) {
+    res.status(500).json({ error: error.message });
+  }
+});
+
 // Finalized /api/ingest endpoint
 app.post('/api/ingest', upload.single('file'), async (req, res) => {
   const logger = req.logger;
