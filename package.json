{
  "name": "mobius-games-tutorial-generator",
  "version": "1.0.0",
  "description": "A pipeline for generating game tutorial videos from structured game rules",
  "main": "index.js",
  "scripts": {
    "compile-shotlist": "node scripts/compile-shotlist.mjs",
    "bind-alignment": "node scripts/bind-alignment.mjs",
    "render": "node scripts/render-ffmpeg.mjs",
    "verify": "node scripts/verify.mjs",
    "test-pipeline": "npm run compile-shotlist && npm run verify && npm run bind-alignment",
    "test": "jest",
    "lint": "eslint src/ scripts/ --ext .js,.mjs",
    "lint:fix": "eslint src/ scripts/ --ext .js,.mjs --fix",
    "test:logging": "node scripts/test_logging.js",
    "test:smoke": "node scripts/smoke-tests.js",
    "test:smoke:quick": "node scripts/smoke-tests.js --quick",
    "backup": "scripts/backup_library.sh",
    "deploy:staging": "scripts/deploy_dhash.sh --env staging",
    "deploy:production": "scripts/deploy_dhash.sh --env production",
    "deploy:dry-run": "scripts/deploy_dhash.sh --dry-run",
    "rollback": "scripts/rollback_dhash.sh",
    "migrate": "node scripts/migrate-dhash.js",
    "migrate:dry-run": "node scripts/migrate-dhash.js --dry-run",
    "gen:shotlists": "node scripts/compile-shotlist.mjs gigs/hanamikoji.json > tmp/shotlist.json",
    "gen:timelines": "echo 'Generating timelines...'",
    "render:proxy": "node scripts/render-ffmpeg.mjs tmp/timeline.json assets out/preview.mp4 --preview",
    "golden:check": "npm run golden:check:sushi && npm run golden:check:loveletter",
    "golden:update:sushi": "node scripts/generate_golden.js --game \"Sushi Go\" --in \"out/sushi-go/preview.mp4\" --out \"tests/golden/sushi-go\" --frames \"5,10,20\"",
    "golden:update:loveletter": "node scripts/generate_golden.js --game \"Love Letter\" --in \"out/love-letter/preview.mp4\" --out \"tests/golden/love-letter\" --frames \"5,10,20\"",
    "golden:check:sushi": "node scripts/check_golden.js --game \"Sushi Go\" --in \"out/sushi-go/preview.mp4\" --golden \"tests/golden/sushi-go\" --frames \"5,10,20\" --ssim \"0.995\" --lufs_tol \"1.0\" --tp_tol \"1.0\"",
    "golden:check:loveletter": "node scripts/check_golden.js --game \"Love Letter\" --in \"out/love-letter/preview.mp4\" --golden \"tests/golden/love-letter\" --frames \"5,10,20\" --ssim \"0.995\" --lufs_tol \"1.0\" --tp_tol \"1.0\"",
    "golden:approve": "npm run golden:update:sushi && npm run golden:update:loveletter",
    "golden:check-with-junit": "node scripts/check_golden.js --game \"Hanamikoji\" --in \"out/preview.mp4\" --golden \"tests/golden/hanamikoji\" --frames \"5,10,20\" --ssim \"0.995\" --lufs_tol \"1.0\" --tp_tol \"1.0\" --junit tests/reports/hanamikoji.xml",
    "golden:update": "node scripts/generate_golden.js",
    "golden:check:junit": "node scripts/check_golden.js --junit tests/golden/reports/junit.xml",
    "golden:check:all": "node -e \"const {execSync}=require('child_process'); const games=['hanamikoji']; for(const g of games){ execSync('node scripts/check_golden.js --game \\\"'+g+'\\\" --in \\\"out/preview.mp4\\\" --perOs', {stdio:'inherit'}) }\""
  },
  "keywords": [
    "game",
    "tutorial",
    "video",
    "generator",
    "rules"
  ],
  "author": "Mobius Games",
  "license": "MIT",
  "dependencies": {
    "axios": "^1.12.2",
    "cheerio": "^1.1.2",
    "cors": "^2.8.5",
    "dotenv": "^17.2.2",
    "express": "^5.1.0",
    "fast-xml-parser": "^5.2.5",
    "fs-extra": "^11.3.2",
    "multer": "^2.0.2",
    "openai": "^5.23.0",
    "pdf-parse": "^1.1.1",
    "pdf-to-img": "^5.0.0",
    "sharp": "^0.34.4",
    "sqlite3": "^5.1.7",
    "typescript": "^5.0.0",
    "winston": "^3.17.0",
    "winston-daily-rotate-file": "^5.0.0",
    "xml2js": "^0.6.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^18.0.0",
    "eslint": "^9.36.0",
    "jest": "^29.7.0",
    "ts-jest": "^29.4.1",
    "ts-node": "^10.9.1"
  },
  "jest": {
    "preset": "ts-jest",
    "testEnvironment": "node",
    "roots": [
      "<rootDir>/src"
    ],
    "testMatch": [
      "**/__tests__/**/*.ts",
      "**/?(*.)+(spec|test).ts"
    ],
    "transform": {
      "^.+\\.tsx?$": "ts-jest"
    }
  }
}
