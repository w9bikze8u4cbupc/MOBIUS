diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
new file mode 100644
index 0000000..7f3c2d0
--- /dev/null
+++ b/.github/workflows/ci.yml
@@ -0,0 +1,210 @@
+name: CI
+
+on:
+  push:
+    branches:
+      - "**"
+  pull_request:
+    branches:
+      - "**"
+
+jobs:
+  lint-and-test:
+    name: Lint & Test (matrix)
+    runs-on: ${{ matrix.os }}
+    strategy:
+      fail-fast: false
+      matrix:
+        os: [ubuntu-latest, macos-latest, windows-latest]
+        node: [20]
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v4
+
+      - name: Setup Node.js
+        uses: actions/setup-node@v4
+        with:
+          node-version: ${{ matrix.node }}
+
+      - name: Cache node modules
+        uses: actions/cache@v4
+        with:
+          path: |
+            ~/.npm
+            **/node_modules
+          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
+          restore-keys: |
+            ${{ runner.os }}-node-${{ matrix.node }}-
+
+      - name: Install dependencies
+        run: npm ci
+
+      - name: Run lint (if present)
+        run: npm run lint --if-present
+
+      - name: Run tests (if present)
+        run: npm test --if-present --passWithNoTests
+
+      - name: Upload test artifacts (if any)
+        if: always()
+        uses: actions/upload-artifact@v4
+        with:
+          name: test-artifacts-${{ matrix.os }}
+          path: |
+            junit.xml
+            coverage/lcov.info
+            coverage/**
+
+  api-smoke-tests:
+    name: API smoke tests (containerized)
+    needs: lint-and-test
+    runs-on: ubuntu-latest
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v4
+
+      - name: Set up Docker Buildx
+        uses: docker/setup-buildx-action@v2
+
+      - name: Install docker-compose (v2 CLI fallback)
+        run: |
+          if ! command -v docker-compose >/dev/null 2>&1; then
+            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
+            sudo chmod +x /usr/local/bin/docker-compose
+          fi
+
+      - name: Build CI API container
+        run: |
+          docker-compose -f docker-compose.staging.yml build --progress=plain
+
+      - name: Start CI API (detached)
+        run: |
+          docker-compose -f docker-compose.staging.yml up -d api-ci
+
+      - name: Run smoke test script (with retries and timeouts)
+        id: run_smoke
+        env:
+          API_URL: http://localhost:5001
+        run: |
+          set -euo pipefail
+          chmod +x ./scripts/ci/smoke-tests.sh
+          ./scripts/ci/smoke-tests.sh "$API_URL" 30 2
+
+      - name: Collect compose logs (always)
+        if: always()
+        run: |
+          docker-compose -f docker-compose.staging.yml logs --no-color > api-ci-compose.logs || true
+
+      - name: Upload compose logs
+        if: always()
+        uses: actions/upload-artifact@v4
+        with:
+          name: api-ci-compose-logs
+          path: api-ci-compose.logs
+
+      - name: Teardown containers
+        if: always()
+        run: |
+          docker-compose -f docker-compose.staging.yml down -v --remove-orphans
+
diff --git a/src/api-ci/Dockerfile.ci b/src/api-ci/Dockerfile.ci
new file mode 100644
index 0000000..c3e6aa1
--- /dev/null
+++ b/src/api-ci/Dockerfile.ci
@@ -0,0 +1,54 @@
+# Multi-stage Dockerfile optimized for CI smoke tests
+FROM node:20-alpine AS build
+
+WORKDIR /app
+
+# Install build/runtime utilities required for health checks and minimal deps
+COPY package*.json ./
+RUN apk add --no-cache curl wget ca-certificates && npm install --production
+
+# Copy source
+COPY . .
+
+FROM node:20-alpine
+WORKDIR /app
+COPY --from=build /app /app
+
+# Add a non-root user with fixed UID for CI reproducibility
+RUN addgroup -g 1001 -S mobius && adduser -u 1001 -S mobius -G mobius
+USER mobius
+
+ENV NODE_ENV=container
+ENV PORT=5001
+EXPOSE 5001
+
+# Healthcheck uses wget to be compatible on minimal images
+HEALTHCHECK --interval=5s --timeout=3s --start-period=5s --retries=6 \
+  CMD wget -qO- http://localhost:5001/health || exit 1
+
+CMD ["node", "index.js"]
+
diff --git a/.dockerignore b/.dockerignore
new file mode 100644
index 0000000..b1d7a9f
--- /dev/null
+++ b/.dockerignore
@@ -0,0 +1,18 @@
+node_modules
+.git
+.gitignore
+coverage
+.env
+*.log
+dist
+client
+tests
+.vscode
+.idea
+tmp
+Dockerfile
+
diff --git a/docker-compose.staging.yml b/docker-compose.staging.yml
new file mode 100644
index 0000000..d62f3b2
--- /dev/null
+++ b/docker-compose.staging.yml
@@ -0,0 +1,48 @@
+version: "3.8"
+
+services:
+  api-ci:
+    build:
+      context: ./src/api-ci
+      dockerfile: Dockerfile.ci
+    ports:
+      - "5001:5001"
+    environment:
+      - NODE_ENV=container
+      - USE_MOCKS=true
+      - PORT=5001
+    healthcheck:
+      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:5001/health"]
+      interval: 5s
+      timeout: 3s
+      retries: 6
+    restart: "no"
+
diff --git a/src/api-ci/package.json b/src/api-ci/package.json
new file mode 100644
index 0000000..a9b2f3c
--- /dev/null
+++ b/src/api-ci/package.json
@@ -0,0 +1,30 @@
+{
+  "name": "mobius-api-ci",
+  "version": "0.1.0",
+  "description": "Minimal CI-only API for smoke tests",
+  "main": "index.js",
+  "scripts": {
+    "start": "node index.js",
+    "test": "node -e \"console.log('no tests'); process.exit(0)\""
+  },
+  "author": "mobius-ci",
+  "license": "MIT",
+  "dependencies": {
+    "express": "^4.18.2",
+    "cors": "^2.8.5",
+    "pidusage": "^3.0.0"
+  }
+}
+
diff --git a/src/api-ci/index.js b/src/api-ci/index.js
new file mode 100644
index 0000000..ef4a9b8
--- /dev/null
+++ b/src/api-ci/index.js
@@ -0,0 +1,226 @@
+const express = require('express');
+const cors = require('cors');
+const pidusage = require('pidusage');
+
+const pkg = (() => {
+  try {
+    return require('./package.json');
+  } catch {
+    return { name: 'mobius-api-ci', version: '0.0.0' };
+  }
+})();
+
+const app = express();
+app.use(cors());
+app.use(express.json());
+
+const PORT = process.env.PORT ? Number(process.env.PORT) : 5001;
+const useMocks = process.env.USE_MOCKS === 'true' || process.env.NODE_ENV === 'container';
+
+const runtime = {
+  mode: useMocks ? 'mock' : 'prod',
+  version: pkg.version || '0.0.0',
+};
+
+app.get('/health', (req, res) => {
+  res.json({
+    status: 'healthy',
+    timestamp: new Date().toISOString(),
+    version: runtime.version,
+    mode: runtime.mode,
+  });
+});
+
+app.get('/ready', async (req, res) => {
+  try {
+    const mem = process.memoryUsage();
+    const cpu = await pidusage(process.pid);
+    res.json({
+      ready: true,
+      uptime: process.uptime(),
+      memory: { rss: mem.rss, heapUsed: mem.heapUsed },
+      cpuPercent: cpu.cpu,
+      mode: runtime.mode,
+    });
+  } catch (err) {
+    res.status(500).json({ ready: false, error: String(err) });
+  }
+});
+
+app.get('/api/info', (req, res) => {
+  res.json({
+    name: pkg.name,
+    version: runtime.version,
+    endpoints: ['/health', '/ready', '/api/info', '/api/echo'],
+    mode: runtime.mode,
+  });
+});
+
+app.post('/api/echo', (req, res) => {
+  res.json({ echo: req.body || null, mode: runtime.mode });
+});
+
+app.use((req, res) => {
+  res.status(404).json({ error: 'not_found' });
+});
+
+const server = app.listen(PORT, () => {
+  console.log(`${pkg.name} listening on ${PORT} (mode=${runtime.mode})`);
+});
+
+process.on('SIGTERM', () => server.close(() => process.exit(0)));
+
diff --git a/scripts/ci/smoke-tests.sh b/scripts/ci/smoke-tests.sh
new file mode 100755
index 0000000..9c5b2e4
--- /dev/null
+++ b/scripts/ci/smoke-tests.sh
@@ -0,0 +1,200 @@
+#!/usr/bin/env bash
+set -euo pipefail
+
+# Usage: ./scripts/ci/smoke-tests.sh <API_URL> <timeout_seconds> <retry_interval_seconds>
+API_URL="${1:-http://localhost:5001}"
+TIMEOUT="${2:-30}"
+RETRY="${3:-2}"
+
+START_TS=$(date +%s)
+END_TS=$((START_TS + TIMEOUT))
+
+LOGFILE="./scripts/ci/smoke-tests.log"
+rm -f "$LOGFILE"
+touch "$LOGFILE"
+
+echo "Smoke test start: $(date -u)" | tee -a "$LOGFILE"
+echo "API_URL=${API_URL}, TIMEOUT=${TIMEOUT}, RETRY=${RETRY}" | tee -a "$LOGFILE"
+
+fail() { echo "SMOKE-TEST: FAIL - $*" | tee -a "$LOGFILE"; cat "$LOGFILE"; exit 1; }
+ok()   { echo "SMOKE-TEST: OK - $*" | tee -a "$LOGFILE"; }
+
+try_curl() {
+  local url="$1"
+  local out
+  if out=$(curl -sS -f -H "Accept: application/json" -H "Content-Type: application/json" "$url" 2>&1); then
+    echo "$out"
+    return 0
+  else
+    echo "$out" >&2
+    return 1
+  fi
+}
+
+echo "Waiting for /health to become healthy..."
+while [ "$(date +%s)" -lt "$END_TS" ]; do
+  if resp=$(try_curl "${API_URL}/health"); then
+    echo "/health response: $resp" | tee -a "$LOGFILE"
+    if command -v jq >/dev/null 2>&1; then
+      echo "$resp" | jq -e '.status == "healthy"' >/dev/null 2>&1 || fail "health.status != healthy"
+      MODE=$(echo "$resp" | jq -r '.mode // "unknown"')
+    else
+      echo "$resp" | grep -q '"status"' || fail "no status in /health response"
+      MODE=$(echo "$resp" | sed -n 's/.*"mode"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p' || echo "unknown")
+    fi
+    echo "Mode detected: ${MODE}" | tee -a "$LOGFILE"
+    ok "/health OK"
+    break
+  fi
+  echo "Not yet healthy, sleeping ${RETRY}s..." | tee -a "$LOGFILE"
+  sleep "$RETRY"
+done
+
+if [ "$(date +%s)" -ge "$END_TS" ]; then
+  fail "/health did not become healthy within ${TIMEOUT}s"
+fi
+
+# /ready
+echo "Checking /ready..."
+if resp=$(try_curl "${API_URL}/ready"); then
+  echo "/ready response: $resp" | tee -a "$LOGFILE"
+  ok "/ready OK"
+else
+  fail "/ready failed"
+fi
+
+# /api/info
+echo "Checking /api/info..."
+if resp=$(try_curl "${API_URL}/api/info"); then
+  echo "/api/info response: $resp" | tee -a "$LOGFILE"
+  ok "/api/info OK"
+else
+  fail "/api/info failed"
+fi
+
+# POST /api/echo
+echo "Checking POST /api/echo..."
+PAYLOAD='{"test":"ping","ts":"'"$(date -u --iso-8601=seconds)"'"}'
+if resp=$(curl -sS -f -H "Content-Type: application/json" -d "$PAYLOAD" "${API_URL}/api/echo"); then
+  echo "/api/echo response: $resp" | tee -a "$LOGFILE"
+  if echo "$resp" | grep -q '"test":"ping"'; then
+    ok "/api/echo OK"
+  else
+    fail "/api/echo did not echo payload"
+  fi
+else
+  fail "/api/echo failed"
+fi
+
+# Verify 404 handling
+echo "Checking 404..."
+resp_code=$(curl -sS -o /dev/null -w "%{http_code}" "${API_URL}/not-found") || true
+if [ "$resp_code" -eq 404 ]; then
+  ok "404 behavior OK"
+else
+  fail "expected 404, got ${resp_code}"
+fi
+
+echo "All smoke checks passed" | tee -a "$LOGFILE"
+exit 0
+
diff --git a/docs/SMOKE_TESTS.md b/docs/SMOKE_TESTS.md
new file mode 100644
index 0000000..349f2c6
--- /dev/null
+++ b/docs/SMOKE_TESTS.md
@@ -0,0 +1,120 @@
+# Containerized API Smoke Tests (local & CI)
+
+This document describes how to run the CI-focused containerized smoke tests locally. The CI workflow runs the same steps.
+
+Prereqs:
+- Docker & Docker Compose installed
+- Ports: 5001 must be available on local machine
+
+Build and run locally:
+
+1. Build
+
+```bash
+docker-compose -f docker-compose.staging.yml build
+```
+
+2. Start the CI API service
+
+```bash
+docker-compose -f docker-compose.staging.yml up -d api-ci
+```
+
+3. Run the smoke test script (bundled in repo)
+
+```bash
+./scripts/ci/smoke-tests.sh http://localhost:5001 30 2
+```
+
+4. Tear down
+
+```bash
+docker-compose -f docker-compose.staging.yml down -v
+```
+
+Expected /health JSON:
+
+```json
+{
+  "status": "healthy",
+  "timestamp": "2025-09-29T01:14:01.319Z",
+  "version": "0.1.0",
+  "mode": "mock"
+}
+```
+
+Notes:
+- The CI API runs in "mock" mode by default when started from the compose file (USE_MOCKS=true). This ensures no external services or secrets are required.
+- The smoke test script validates /health, /ready, /api/info, POST /api/echo, and 404 behavior. It provides logs and exits non-zero if any checks fail.
+
+Security:
+- No secrets are needed for these tests. Do NOT add production secrets to CI for these smoke tests.
+
+Troubleshooting:
+- If Docker build fails on CI, inspect `api-ci-compose-logs` artifact uploaded by the workflow.
+- If tests time out, increase the timeout parameter when running the script locally.
+
