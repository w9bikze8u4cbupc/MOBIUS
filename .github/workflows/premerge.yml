name: Pre-merge Validation

on:
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'scripts/**'
      - 'package*.json'
      - '.github/workflows/**'
      - 'quality-gates-config.json'

env:
  NODE_VERSION: '20'
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  validate-changes:
    name: Validate Changes
    runs-on: ubuntu-latest
    outputs:
      has-dhash-changes: ${{ steps.check-changes.outputs.has-dhash-changes }}
      backup-created: ${{ steps.backup.outputs.created }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check for dhash-related changes
        id: check-changes
        run: |
          if git diff origin/main --name-only | grep -E "(dhash|quality-gates)" >/dev/null 2>&1; then
            echo "has-dhash-changes=true" >> $GITHUB_OUTPUT
            echo "✅ dhash-related changes detected"
          else
            echo "has-dhash-changes=false" >> $GITHUB_OUTPUT  
            echo "ℹ️ No dhash-related changes detected"
          fi
      
      - name: Lint code
        run: |
          if command -v npm run lint >/dev/null 2>&1; then
            npm run lint
          else
            echo "No lint script found, skipping..."
          fi
      
      - name: Run tests
        run: |
          npm test -- --passWithNoTests --ci --reporters=default
      
      - name: Create pre-merge backup
        id: backup
        if: steps.check-changes.outputs.has-dhash-changes == 'true'
        run: |
          echo "Creating pre-merge backup..."
          ./scripts/backup_dhash.sh --dry-run --env staging --verbose
          echo "created=true" >> $GITHUB_OUTPUT
      
      - name: Validate deployment scripts
        if: steps.check-changes.outputs.has-dhash-changes == 'true'
        run: |
          echo "Validating deployment scripts..."
          ./scripts/deploy_dhash.sh --help
          ./scripts/migrate_dhash.sh --help
          ./scripts/backup_dhash.sh --help
          ./scripts/rollback_dhash.sh --help
          echo "✅ All deployment scripts are executable and show help"
      
      - name: Test notification system
        if: steps.check-changes.outputs.has-dhash-changes == 'true'
        run: |
          echo "Testing notification system..."
          node scripts/notify.js --level info --message "Pre-merge validation test" --env staging --verbose
          node scripts/deploy/deploy-notify.js --type deployment_start --env staging --verbose
          echo "✅ Notification system functional"
      
      - name: Validate quality gates config
        if: steps.check-changes.outputs.has-dhash-changes == 'true'
        run: |
          echo "Validating quality gates configuration..."
          if [[ -f "quality-gates-config.json" ]]; then
            node -e "
              const config = JSON.parse(require('fs').readFileSync('quality-gates-config.json', 'utf8'));
              console.log('✅ Quality gates config is valid JSON');
              console.log('Environments:', Object.keys(config.environments).join(', '));
              console.log('Default environment:', config.default_environment);
            "
          else
            echo "❌ quality-gates-config.json not found"
            exit 1
          fi

  dry-run-tests:
    name: Dry-run Deployment Tests
    runs-on: ubuntu-latest
    needs: validate-changes
    if: needs.validate-changes.outputs.has-dhash-changes == 'true'
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Dry-run backup
        run: |
          echo "Testing backup for ${{ matrix.environment }}..."
          ./scripts/backup_dhash.sh --dry-run --env ${{ matrix.environment }} --verbose
      
      - name: Dry-run migration
        run: |
          echo "Testing migration for ${{ matrix.environment }}..."
          ./scripts/migrate_dhash.sh --dry-run --env ${{ matrix.environment }} --verbose
      
      - name: Dry-run deployment
        run: |
          echo "Testing deployment for ${{ matrix.environment }}..."
          ./scripts/deploy_dhash.sh --dry-run --env ${{ matrix.environment }} --verbose
      
      - name: Dry-run monitoring
        run: |
          echo "Testing monitoring for ${{ matrix.environment }}..."
          timeout 30s node scripts/monitor_dhash.js --env ${{ matrix.environment }} --dry-run --verbose || true
          echo "✅ Monitoring dry-run completed"
      
      - name: Dry-run smoke tests
        run: |
          echo "Testing smoke tests for ${{ matrix.environment }}..."
          ./scripts/smoke_tests.sh --dry-run --env ${{ matrix.environment }} --quick --verbose

  create-artifacts:
    name: Create Pre-merge Artifacts
    runs-on: ubuntu-latest
    needs: [validate-changes, dry-run-tests]
    if: needs.validate-changes.outputs.has-dhash-changes == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Create artifacts directory
        run: mkdir -p premerge_artifacts
      
      - name: Generate deployment artifacts
        run: |
          echo "Generating deployment artifacts..."
          
          # Create deployment manifest
          cat > premerge_artifacts/deployment_manifest.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "pr_number": "${{ github.event.number }}",
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.head_ref }}",
            "environment": "staging",
            "artifacts": {
              "backup_tested": true,
              "migration_tested": true,
              "deployment_tested": true,
              "monitoring_tested": true,
              "smoke_tests_tested": true
            }
          }
          EOF
          
          # Copy deployment scripts
          cp scripts/deploy_dhash.sh premerge_artifacts/
          cp scripts/migrate_dhash.sh premerge_artifacts/
          cp scripts/backup_dhash.sh premerge_artifacts/
          cp scripts/rollback_dhash.sh premerge_artifacts/
          cp scripts/smoke_tests.sh premerge_artifacts/
          cp scripts/monitor_dhash.js premerge_artifacts/
          cp scripts/notify.js premerge_artifacts/
          cp quality-gates-config.json premerge_artifacts/
          
          # Generate validation report
          cat > premerge_artifacts/validation_report.md << EOF
          # Pre-merge Validation Report
          
          **PR:** #${{ github.event.number }}
          **Branch:** ${{ github.head_ref }}
          **Commit:** ${{ github.sha }}
          **Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          ## Validation Results
          
          - ✅ Code linting passed
          - ✅ Unit tests passed
          - ✅ Deployment scripts validated
          - ✅ Dry-run tests completed for staging and production
          - ✅ Quality gates configuration validated
          - ✅ Notification system tested
          - ✅ Monitoring system tested
          - ✅ Smoke tests validated
          
          ## Artifacts Generated
          
          - Deployment scripts bundle
          - Quality gates configuration
          - Validation manifest
          - This validation report
          
          ## Next Steps
          
          1. Obtain Deploy operator (@ops) sign-off
          2. Merge PR using rebase-and-merge
          3. Execute deployment using: \`./scripts/deploy_dhash.sh --env production --backup-first\`
          4. Monitor deployment using: \`node scripts/monitor_dhash.js --env production\`
          
          EOF
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: premerge-artifacts-${{ github.sha }}
          path: premerge_artifacts/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      
      - name: Comment on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('premerge_artifacts/validation_report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 Pre-merge Validation Complete\n\n${report}\n\n**Artifacts:** Available in the [workflow run artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            });

  require-approval:
    name: Require Deploy Operator Approval
    runs-on: ubuntu-latest
    needs: [validate-changes, dry-run-tests, create-artifacts]
    if: needs.validate-changes.outputs.has-dhash-changes == 'true'
    
    steps:
      - name: Check for required approvals
        uses: actions/github-script@v7
        with:
          script: |
            if (context.eventName !== 'pull_request') {
              console.log('Not a pull request, skipping approval check');
              return;
            }
            
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const approvals = reviews.filter(review => review.state === 'APPROVED');
            const opsApprovals = approvals.filter(review => 
              review.user.login.includes('ops') || 
              review.user.login.includes('sre') ||
              review.author_association === 'MEMBER'
            );
            
            console.log(`Total approvals: ${approvals.length}`);
            console.log(`Ops/SRE approvals: ${opsApprovals.length}`);
            
            if (approvals.length < 2) {
              core.setFailed('At least 2 approvals required for dhash deployment');
            }
            
            if (opsApprovals.length < 1) {
              core.setFailed('At least 1 approval from Ops/SRE team member required');
            }
            
            console.log('✅ Approval requirements met');

  deployment-ready:
    name: Mark as Deployment Ready
    runs-on: ubuntu-latest
    needs: [validate-changes, dry-run-tests, create-artifacts, require-approval]
    if: needs.validate-changes.outputs.has-dhash-changes == 'true'
    
    steps:
      - name: Mark deployment ready
        run: |
          echo "🎉 dhash deployment is ready!"
          echo "✅ All pre-merge validations passed"
          echo "✅ Artifacts generated and uploaded"
          echo "✅ Required approvals obtained"
          echo ""
          echo "Ready for merge and deployment to production."
          
      - name: Update PR status
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ✅ Deployment Ready\n\n**Status:** All pre-merge gates passed\n**Action:** Ready for rebase-and-merge\n\n**Post-merge deployment command:**\n\`\`\`bash\n./scripts/deploy_dhash.sh --env production --backup-first\nnode scripts/monitor_dhash.js --env production\n\`\`\`\n\n**Rollback command (if needed):**\n\`\`\`bash\nLATEST_BACKUP=$(ls -1 backups/dhash_*.zip | sort -r | head -n1)\n./scripts/rollback_dhash.sh --backup "$LATEST_BACKUP" --env production\n\`\`\``
            });