name: CI

on:
  push:
  pull_request:

jobs:
  build-and-qa:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: Ensure FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2

      - name: Install Python (Unix)
        if: runner.os != 'Windows'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
        shell: pwsh

      - name: Build
        run: npm run build --if-present

      - name: Unit tests
        run: npm test -- --ci --reporters=default

      - name: Render preview
        run: |
          mkdir -p out artifacts
          npm run render:preview # <- replace with your preview command
        shell: bash

      - name: Audio ebur128
        run: |
          ffmpeg -hide_banner -nostats -i out/preview_with_audio.mp4 -filter_complex ebur128 -f null - 2> artifacts/preview_with_audio_ebur128.txt
        shell: bash

      - name: Capture provenance (Unix)
        if: runner.os != 'Windows'
        run: bash scripts/capture_provenance.sh artifacts out/preview_with_audio.mp4
        shell: bash

      - name: Capture provenance (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File scripts/capture_provenance.ps1 artifacts out/preview_with_audio.mp4
        shell: cmd

      - name: Audio gates (Unix)
        if: runner.os != 'Windows'
        run: python3 scripts/check_audio_compliance.py artifacts/preview_with_audio_ebur128.txt
        shell: bash

      - name: Audio gates (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File scripts/check_audio_compliance.ps1 artifacts/preview_with_audio_ebur128.txt
        shell: cmd

      - name: Container gates (Unix)
        if: runner.os != 'Windows'
        run: bash scripts/check_container.sh artifacts/preview_ffprobe.json
        shell: bash

      - name: Container gates (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File scripts/check_container.ps1 artifacts/preview_ffprobe.json
        shell: cmd

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qa-${{ matrix.os }}
          path: |
            artifacts/**
            out/preview_with_audio.mp4

  api-smoke-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm ci
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Run repository verification
        run: |
          npm run verify-clean-genesis || node scripts/verify-clean-genesis.js

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build CI container
        run: |
          docker build -f Dockerfile.ci -t mobius-api-ci:local .

      - name: Start staging environment
        run: |
          docker compose -f docker-compose.staging.yml up -d
          sleep 5

      - name: Wait for API to be ready
        run: |
          timeout 60 bash -c 'until curl -sf http://localhost:5001/health; do sleep 2; done'

      - name: Run smoke tests
        run: |
          ./scripts/ci/smoke-tests.sh http://localhost:5001 30 2

      - name: Collect container logs
        if: failure()
        run: |
          docker compose -f docker-compose.staging.yml logs --no-log-prefix -t > container-logs.txt

      - name: Stop staging environment
        if: always()
        run: |
          docker compose -f docker-compose.staging.yml down --volumes --remove-orphans

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-smoke-test-logs
          path: |
            smoke-tests-*.log
            container-logs.txt
            verification-reports/