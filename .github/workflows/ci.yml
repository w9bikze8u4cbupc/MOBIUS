name: Multi-Platform FastAPI CI

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

jobs:
  # Linting job - runs on Ubuntu only for speed
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check code formatting with Black
        run: |
          cd backend
          black --check --diff .

      - name: Lint with flake8
        run: |
          cd backend
          flake8 .

      - name: Check import sorting with isort
        run: |
          cd backend
          isort --check-only --diff .

  # Multi-platform test matrix
  test:
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11']
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/AppData/Local/pip/Cache
            ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest with coverage
        run: |
          cd backend
          pytest -v --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: |
            backend/coverage.xml
            backend/.pytest_cache/

  # Docker build and smoke test - Ubuntu only
  docker-smoke-test:
    needs: lint
    runs-on: ubuntu-latest
    env:
      ALLOWED_TOKEN: ${{ secrets.ALLOWED_TOKEN }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          cd backend
          docker build -t mobius-ingestion:test .

      - name: Run Docker container for smoke test
        run: |
          # Start container in background
          docker run -d \
            --name mobius-test \
            -p 8000:8000 \
            -e ALLOWED_TOKEN="${ALLOWED_TOKEN}" \
            mobius-ingestion:test

      - name: Wait for container to start
        run: |
          echo "Waiting for container to be ready..."
          timeout=30
          while [ $timeout -gt 0 ]; do
            if docker exec mobius-test curl -f http://localhost:8000/health >/dev/null 2>&1; then
              echo "Container is ready!"
              break
            fi
            echo "Waiting... ($timeout seconds remaining)"
            sleep 1
            timeout=$((timeout - 1))
          done
          
          if [ $timeout -eq 0 ]; then
            echo "Container failed to start within 30 seconds"
            docker logs mobius-test
            exit 1
          fi

      - name: Test health endpoint
        run: |
          response=$(curl -s http://localhost:8000/health)
          echo "Health endpoint response: $response"
          
          # Verify response contains expected fields
          if echo "$response" | grep -q '"status":"healthy"' && echo "$response" | grep -q '"service":"mobius-ingestion"'; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            exit 1
          fi

      - name: Test authenticated endpoint
        run: |
          # Test without auth (should fail)
          if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/api/status | grep -q "403\|401"; then
            echo "✅ Unauthenticated request correctly rejected"
          else
            echo "❌ Unauthenticated request should have been rejected"
            exit 1
          fi
          
          # Test with auth (should succeed)
          if [ -n "${ALLOWED_TOKEN}" ]; then
            response=$(curl -s -H "Authorization: Bearer ${ALLOWED_TOKEN}" http://localhost:8000/api/status)
            if echo "$response" | grep -q '"authenticated":true'; then
              echo "✅ Authenticated request succeeded"
            else
              echo "❌ Authenticated request failed: $response"
              exit 1
            fi
          else
            echo "⚠️  ALLOWED_TOKEN not set, skipping authenticated test"
          fi

      - name: Cleanup container
        if: always()
        run: |
          docker stop mobius-test || true
          docker rm mobius-test || true

      - name: Upload Docker logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: |
            /tmp/docker-logs.txt