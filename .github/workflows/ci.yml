name: CI

on:
  push:
    branches: [ main, staging, '**/feature/**' ]
  pull_request:
    branches: [ main, staging ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  CI_TIMEOUT_SECONDS: 1800

jobs:
  lint-and-test:
    name: Lint & Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache npm fallback
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install root dependencies (if present)
        run: |
          if [ -f package-lock.json ] || [ -f package.json ]; then
            npm ci
          else
            echo "No root package.json found; skipping"
          fi

      - name: Install client dependencies (if client exists)
        run: |
          if [ -d client ] && [ -f client/package.json ]; then
            pushd client
            npm ci
            popd
          else
            echo "No client/ or client/package.json; skipping client install"
          fi

      - name: Run ESLint (root + client) -- if configured
        run: |
          npm run -s lint --if-present || true
          if [ -d client ] && [ -f client/package.json ]; then
            pushd client
            npm run -s lint --if-present || true
            popd
          fi

      - name: Run unit tests (root + client)
        run: |
          # root tests (passWithNoTests allows empty suites)
          npm test --if-present --silent -- --passWithNoTests || true
          # client tests
          if [ -d client ] && [ -f client/package.json ]; then
            pushd client
            npm test --if-present --silent -- --passWithNoTests || true
            popd
          fi

      - name: Collect test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: node-test-artifacts-${{ matrix.os }}
          path: |
            junit.xml
            coverage/lcov.info
            client/junit.xml
            client/coverage/lcov.info

  api-smoke-test:
    name: API smoke test (Ubuntu authenticated)
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: needs.lint-and-test.result == 'success'
    env:
      ALLOWED_TOKEN: ${{ secrets.ALLOWED_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies (root)
        run: |
          npm ci

      - name: Setup FFmpeg (optional for video flows)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ffmpeg || true

      - name: Start API (background)
        run: |
          export ALLOWED_TOKEN="${ALLOWED_TOKEN:-}"
          nohup npm run start --if-present > api_server.log 2>&1 &
          # If start script not present, attempt to run main file directly
          if ! pgrep -f "node" >/dev/null; then
            nohup node src/api/index.js > api_server.log 2>&1 &
          fi
          sleep 3

      - name: Wait for public endpoint / (30s)
        run: |
          for i in $(seq 1 30); do
            if curl -fsS http://localhost:5001/ >/dev/null 2>&1; then
              echo "public endpoint OK"
              exit 0
            fi
            sleep 1
          done
          echo "public endpoint failed" >&2
          tail -n 200 api_server.log || true
          exit 1

      - name: Authenticated health check (if ALLOWED_TOKEN present)
        run: |
          if [ -z "${ALLOWED_TOKEN}" ]; then
            echo "ALLOWED_TOKEN not set; skipping authenticated checks"
            exit 0
          fi
          if curl -fsS -H "Authorization: Bearer ${ALLOWED_TOKEN}" http://localhost:5001/health >/dev/null 2>&1; then
            echo "authenticated health OK"
          else
            echo "authenticated health failed" >&2
            tail -n 200 api_server.log || true
            exit 1
          fi

      - name: Upload API logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-server-logs
          path: api_server.log

      - name: Kill any node processes (cleanup)
        if: always()
        run: |
          pkill -f node || true

  staging-e2e:
    name: Staging-only docker-compose E2E
    runs-on: ubuntu-latest
    needs: api-smoke-test
    if: github.ref == 'refs/heads/staging'
    env:
      ALLOWED_TOKEN: ${{ secrets.ALLOWED_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure docker-compose plugin
        run: |
          sudo apt-get update -y
          sudo apt-get install -y docker-compose-plugin

      - name: Build and bring up compose stack (detached)
        run: |
          docker compose -f docker-compose.staging.yml build --pull
          docker compose -f docker-compose.staging.yml up -d

      - name: Wait for API health (60s)
        run: |
          for i in $(seq 1 60); do
            if curl -fsS http://localhost:5001/ >/dev/null 2>&1; then
              echo "api healthy"
              exit 0
            fi
            sleep 1
          done
          echo "api failed healthcheck" >&2
          docker compose -f docker-compose.staging.yml logs || true
          exit 1

      - name: Staging smoke checks (auth)
        run: |
          if [ -z "${ALLOWED_TOKEN}" ]; then
            echo "ALLOWED_TOKEN not set; skipping authenticated staging checks"
            exit 0
          fi
          curl -fsS http://localhost:5001/ || true
          curl -fsS -H "Authorization: Bearer ${ALLOWED_TOKEN}" http://localhost:5001/health || true

      - name: Collect compose logs
        if: always()
        run: |
          docker compose -f docker-compose.staging.yml logs > compose_stack_logs.txt || true

      - name: Upload compose logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-e2e-logs
          path: compose_stack_logs.txt

      - name: Tear down compose stack
        if: always()
        run: |
          docker compose -f docker-compose.staging.yml down --volumes --remove-orphans || true