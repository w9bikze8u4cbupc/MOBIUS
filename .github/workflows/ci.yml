name: CI

on:
  push:
  pull_request:

jobs:
  build-and-qa:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: Ensure FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2

      - name: Install Python (Unix)
        if: runner.os != 'Windows'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
        shell: pwsh

      # Backend testing (FastAPI)
      - name: Setup backend (Unix)
        if: runner.os != 'Windows'
        run: |
          cd backend
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
        shell: bash

      - name: Setup backend (Windows)
        if: runner.os == 'Windows'
        run: |
          cd backend
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1
          pip install --upgrade pip
          pip install -r requirements.txt
        shell: pwsh

      - name: Lint backend (Unix)
        if: runner.os != 'Windows'
        run: |
          cd backend
          source .venv/bin/activate
          flake8 main.py test_api.py --max-line-length=88 --extend-ignore=E203,W503
          black --check main.py test_api.py --line-length=88
        shell: bash

      - name: Lint backend (Windows)
        if: runner.os == 'Windows'
        run: |
          cd backend
          .\.venv\Scripts\Activate.ps1
          flake8 main.py test_api.py --max-line-length=88 --extend-ignore=E203,W503
          black --check main.py test_api.py --line-length=88
        shell: pwsh

      - name: Test backend (Unix)
        if: runner.os != 'Windows'
        env:
          ALLOWED_TOKEN: test-token-123
        run: |
          cd backend
          source .venv/bin/activate
          python -m pytest test_api.py -v
        shell: bash

      - name: Test backend (Windows)
        if: runner.os == 'Windows'
        env:
          ALLOWED_TOKEN: test-token-123
        run: |
          cd backend
          .\.venv\Scripts\Activate.ps1
          python -m pytest test_api.py -v
        shell: pwsh

      - name: Build
        run: npm run build --if-present

      - name: Unit tests
        run: npm test -- --ci --reporters=default

      - name: Render preview
        run: |
          mkdir -p out artifacts
          npm run render:preview # <- replace with your preview command
        shell: bash

      - name: Audio ebur128
        run: |
          ffmpeg -hide_banner -nostats -i out/preview_with_audio.mp4 -filter_complex ebur128 -f null - 2> artifacts/preview_with_audio_ebur128.txt
        shell: bash

      - name: Capture provenance (Unix)
        if: runner.os != 'Windows'
        run: bash scripts/capture_provenance.sh artifacts out/preview_with_audio.mp4
        shell: bash

      - name: Capture provenance (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File scripts/capture_provenance.ps1 artifacts out/preview_with_audio.mp4
        shell: cmd

      - name: Audio gates (Unix)
        if: runner.os != 'Windows'
        run: python3 scripts/check_audio_compliance.py artifacts/preview_with_audio_ebur128.txt
        shell: bash

      - name: Audio gates (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File scripts/check_audio_compliance.ps1 artifacts/preview_with_audio_ebur128.txt
        shell: cmd

      - name: Container gates (Unix)
        if: runner.os != 'Windows'
        run: bash scripts/check_container.sh artifacts/preview_ffprobe.json
        shell: bash

      - name: Container gates (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File scripts/check_container.ps1 artifacts/preview_ffprobe.json
        shell: cmd

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qa-${{ matrix.os }}
          path: |
            artifacts/**
            out/preview_with_audio.mp4