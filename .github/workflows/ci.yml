name: CI

on:
  push:
  pull_request:

jobs:
  build-and-qa:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: Ensure FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2

      # Install Poppler for PDF processing
      - name: Install Poppler (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils
          pdfimages -v || echo "pdfimages not found"
          pdftoppm -v || echo "pdftoppm not found"

      - name: Install Poppler (macOS)  
        if: runner.os == 'macOS'
        run: |
          brew install poppler
          pdfimages -v || echo "pdfimages not found"
          pdftoppm -v || echo "pdftoppm not found"
      
      - name: Install Poppler (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install poppler -y
          $env:PATH = "C:\ProgramData\chocolatey\lib\poppler\tools\poppler\bin;" + $env:PATH
          echo $env:PATH
          pdfimages -v
          pdftoppm -v
        shell: pwsh

      - name: Install Python (Unix)
        if: runner.os != 'Windows'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
        shell: pwsh

      # Test PDF processing capabilities
      - name: Test PDF processing health check
        run: |
          node -e "
          import { healthCheckPdfProcessing } from './src/utils/pdfExtraction.js';
          (async () => {
            try {
              const health = await healthCheckPdfProcessing();
              console.log('Health check result:', JSON.stringify(health, null, 2));
              if (!health.healthy) {
                console.error('‚ùå PDF processing health check failed');
                process.exit(1);
              }
              console.log('‚úÖ PDF processing health check passed');
            } catch (error) {
              console.error('Health check error:', error.message);
              process.exit(1);
            }
          })();
          "
        shell: bash

      - name: Build
        run: npm run build --if-present

      - name: Unit tests
        run: npm test -- --ci --reporters=default --passWithNoTests

      # Create a test PDF for validation
      - name: Create test PDF (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p test-fixtures
          echo "Test PDF content" | ps2pdf - test-fixtures/test.pdf || echo "ps2pdf not available, using alternative"
          # Alternative: create a simple PDF using node if ps2pdf fails
          node -e "
          import fs from 'fs';
          const pdfContent = '%PDF-1.4\n1 0 obj\n<<\n/Type /Catalog\n/Pages 2 0 R\n>>\nendobj\n2 0 obj\n<<\n/Type /Pages\n/Kids [3 0 R]\n/Count 1\n>>\nendobj\n3 0 obj\n<<\n/Type /Page\n/Parent 2 0 R\n/MediaBox [0 0 612 792]\n>>\nendobj\nxref\n0 4\n0000000000 65535 f \n0000000009 00000 n \n0000000058 00000 n \n0000000115 00000 n \ntrailer\n<<\n/Size 4\n/Root 1 0 R\n>>\nstartxref\n181\n%%EOF';
          fs.writeFileSync('test-fixtures/simple.pdf', pdfContent);
          console.log('Test PDF created');
          " || echo "Test PDF creation skipped"
        shell: bash

      - name: Create test PDF (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir -p test-fixtures
          # Create a minimal PDF using PowerShell
          $pdfContent = @"
          %PDF-1.4
          1 0 obj
          <<
          /Type /Catalog
          /Pages 2 0 R
          >>
          endobj
          2 0 obj
          <<
          /Type /Pages
          /Kids [3 0 R]
          /Count 1
          >>
          endobj
          3 0 obj
          <<
          /Type /Page
          /Parent 2 0 R
          /MediaBox [0 0 612 792]
          >>
          endobj
          xref
          0 4
          0000000000 65535 f 
          0000000009 00000 n 
          0000000058 00000 n 
          0000000115 00000 n 
          trailer
          <<
          /Size 4
          /Root 1 0 R
          >>
          startxref
          181
          %%EOF
          "@
          [System.IO.File]::WriteAllText("test-fixtures/simple.pdf", $pdfContent)
          echo "Test PDF created for Windows"
        shell: pwsh

      # Test image hashing functionality
      - name: Test image hashing
        run: |
          node -e "
          import { calculateHammingDistance, calculateConfidence, getMaxHammingDistance, HASH_CONFIG } from './src/utils/imageHashing.js';
          console.log('üß™ Testing image hashing functions...');
          
          // Test Hamming distance
          const distance = calculateHammingDistance(0xFFFF, 0x0000);
          console.assert(distance === 16, 'Hamming distance test failed');
          
          // Test confidence calculation  
          const confidence = calculateConfidence(6, 64);
          console.assert(Math.abs(confidence - (1 - 6/64)) < 0.001, 'Confidence test failed');
          
          // Test threshold calculation
          const maxHamming = getMaxHammingDistance(0.90, 64);
          console.assert(maxHamming === 6, 'Threshold test failed');
          
          console.log('‚úÖ All hashing tests passed');
          console.log('Hash config:', HASH_CONFIG);
          "

      - name: Render preview
        run: |
          mkdir -p out artifacts
          npm run render:preview || echo "Preview render skipped - not implemented yet"
        shell: bash

      - name: Audio ebur128
        run: |
          # Create a dummy audio file for testing if preview exists
          if [ -f "out/preview_with_audio.mp4" ]; then
            ffmpeg -hide_banner -nostats -i out/preview_with_audio.mp4 -filter_complex ebur128 -f null - 2> artifacts/preview_with_audio_ebur128.txt || echo "Audio analysis skipped"
          else
            echo "No audio file to analyze" > artifacts/preview_with_audio_ebur128.txt
          fi
        shell: bash

      - name: Capture provenance (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts
          echo "Provenance capture for Unix" > artifacts/provenance.txt
          echo "OS: $(uname -a)" >> artifacts/provenance.txt
          echo "Node: $(node --version)" >> artifacts/provenance.txt
          echo "NPM: $(npm --version)" >> artifacts/provenance.txt
          which pdfimages pdftoppm >> artifacts/provenance.txt || echo "PDF tools not found"
        shell: bash

      - name: Capture provenance (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir -p artifacts
          echo "Provenance capture for Windows" > artifacts/provenance.txt
          echo "OS: $env:OS" >> artifacts/provenance.txt  
          echo "Node: $(node --version)" >> artifacts/provenance.txt
          echo "NPM: $(npm --version)" >> artifacts/provenance.txt
          where.exe pdfimages pdftoppm >> artifacts/provenance.txt
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qa-${{ matrix.os }}
          path: |
            artifacts/**
            test-fixtures/**
            out/**