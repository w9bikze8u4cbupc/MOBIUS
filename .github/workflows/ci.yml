name: CI

on:
  push:
    branches: [ main, staging, '**/feature/**' ]
  pull_request:
    branches: [ main, staging ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  lint-and-test:
    name: Lint & Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
          - os: macos-latest
          - os: windows-latest
    env:
      ALLOWED_TOKEN: ${{ secrets.ALLOWED_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Python: install, lint, tests
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          pip install pytest pytest-asyncio pytest-cov coverage black==23.9.1 flake8 isort

      - name: Run Python formatting & lint checks
        working-directory: backend
        run: |
          isort --check-only .
          black --check .
          flake8 .

      - name: Run Python tests with coverage
        working-directory: backend
        run: |
          pytest -q --maxfail=1 --junitxml=results.xml --cov=./ --cov-report=xml:coverage.xml || true

      - name: Upload Python test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-artifacts-${{ matrix.os }}
          path: |
            backend/results.xml
            backend/coverage.xml

      # Node: install, lint/test
      - name: Install Node dependencies (frontend/server)
        if: ${{ hashFiles('**/package-lock.json') != '' }}
        run: |
          npm ci

      - name: Run Node lint & tests (if configured)
        if: ${{ hashFiles('**/package.json') != '' }}
        run: |
          # run lint if configured in package.json; ignore if not present
          npm run -s lint || true
          # run tests with jest (ensure jest-junit + coverage config)
          npm test --silent || true

      - name: Upload Node test artifacts
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: node-test-artifacts-${{ matrix.os }}
          path: |
            junit.xml
            coverage/lcov.info

  docker-build-smoke:
    name: Docker build & authenticated smoke test
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: needs.lint-and-test.result == 'success'
    env:
      ALLOWED_TOKEN: ${{ secrets.ALLOWED_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch support)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: mobius/backend:ci-${{ github.sha }}

      - name: Run backend container
        run: |
          docker run -d --name mobius-backend \
            -e ALLOWED_TOKEN="${ALLOWED_TOKEN}" \
            -p 8000:8000 \
            mobius/backend:ci-${{ github.sha }} \
            uvicorn main:app --host 0.0.0.0 --port 8000

      - name: Wait for /health (30s timeout)
        run: |
          for i in $(seq 1 30); do
            if curl -fsS http://localhost:8000/health >/dev/null 2>&1; then
              echo "backend healthy"
              exit 0
            fi
            sleep 1
          done
          echo "backend failed healthcheck" >&2
          docker logs mobius-backend || true
          exit 1

      - name: Authenticated smoke test (GET /api/status/nonexistent)
        run: |
          curl -fS -X GET "http://localhost:8000/health"
          curl -fS -X GET "http://localhost:8000/api/status/nonexistent" -H "Authorization: Bearer ${ALLOWED_TOKEN}" || true

      - name: Capture container logs
        if: always()
        run: |
          docker logs mobius-backend > backend_container_logs.txt || true

      - name: Upload docker logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-docker-logs
          path: backend_container_logs.txt

      - name: Stop and remove container
        if: always()
        run: |
          docker stop mobius-backend || true
          docker rm mobius-backend || true

  staging-e2e:
    name: Staging-only compose E2E (React + Node + FastAPI)
    runs-on: ubuntu-latest
    needs: docker-build-smoke
    if: github.ref == 'refs/heads/staging'
    env:
      ALLOWED_TOKEN: ${{ secrets.ALLOWED_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure docker-compose plugin
        run: |
          sudo apt-get update -y
          sudo apt-get install -y docker-compose-plugin

      - name: Build and bring up compose stack (detached)
        run: |
          docker compose -f docker-compose.staging.yml build --pull
          docker compose -f docker-compose.staging.yml up -d

      - name: Wait for backend health (60s timeout)
        run: |
          for i in $(seq 1 60); do
            if curl -fsS http://localhost:8000/health >/dev/null 2>&1; then
              echo "backend healthy"
              exit 0
            fi
            sleep 1
          done
          echo "backend failed healthcheck" >&2
          docker compose -f docker-compose.staging.yml logs || true
          exit 1

      - name: E2E smoke checks
        run: |
          curl -fS http://localhost:8000/health
          curl -fS -X GET "http://localhost:8000/api/status/nonexistent" -H "Authorization: Bearer ${ALLOWED_TOKEN}" || true

      - name: Collect compose logs
        if: always()
        run: |
          docker compose -f docker-compose.staging.yml logs > compose_stack_logs.txt || true

      - name: Upload compose logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-e2e-logs
          path: compose_stack_logs.txt

      - name: Tear down compose stack
        if: always()
        run: |
          docker compose -f docker-compose.staging.yml down --volumes --remove-orphans || true