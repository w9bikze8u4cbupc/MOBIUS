name: CI

on:
  push:
  pull_request:

jobs:
  build-and-qa:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: Ensure FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2

      - name: Install Python (Unix)
        if: runner.os != 'Windows'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
        shell: pwsh

      - name: Build
        run: npm run build --if-present

      - name: Unit tests
        run: npm test -- --ci --reporters=default

      - name: Render preview
        run: |
          mkdir -p out artifacts
          npm run render:preview # <- replace with your preview command
        shell: bash

      - name: DHhash system validation (if enabled)
        if: env.ENABLE_DHASH_VALIDATION == 'true'
        run: |
          echo "=== DHhash System Validation ==="
          
          # Create development environment for testing
          mkdir -p backups deploy_logs
          
          # Test dhash scripts if they exist
          if [ -f "./scripts/deploy_dhash.sh" ]; then
            echo "Testing dhash deployment scripts..."
            ./scripts/deploy_dhash.sh --help
            ./scripts/backup_dhash.sh --help || echo "Backup script not found"
            ./scripts/smoke_tests.sh --help || echo "Smoke tests script not found"
            
            # Run basic validation
            ./scripts/smoke_tests.sh --env development --level critical --dry-run || echo "Smoke tests not available"
          fi
          
          # Test notification system if available
          if [ -f "./scripts/notify.js" ]; then
            echo "Testing notification system..."
            node scripts/notify.js --type deployment --severity info --message "CI validation test" --env development --channels file
          fi
        shell: bash
        env:
          ENABLE_DHASH_VALIDATION: ${{ contains(github.event.head_commit.message, '[dhash]') || contains(github.ref, 'dhash') }}

      - name: Audio ebur128
        run: |
          ffmpeg -hide_banner -nostats -i out/preview_with_audio.mp4 -filter_complex ebur128 -f null - 2> artifacts/preview_with_audio_ebur128.txt
        shell: bash

      - name: Capture provenance (Unix)
        if: runner.os != 'Windows'
        run: bash scripts/capture_provenance.sh artifacts out/preview_with_audio.mp4
        shell: bash

      - name: Capture provenance (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File scripts/capture_provenance.ps1 artifacts out/preview_with_audio.mp4
        shell: cmd

      - name: Audio gates (Unix)
        if: runner.os != 'Windows'
        run: python3 scripts/check_audio_compliance.py artifacts/preview_with_audio_ebur128.txt
        shell: bash

      - name: Audio gates (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File scripts/check_audio_compliance.ps1 artifacts/preview_with_audio_ebur128.txt
        shell: cmd

      - name: Container gates (Unix)
        if: runner.os != 'Windows'
        run: bash scripts/check_container.sh artifacts/preview_ffprobe.json
        shell: bash

      - name: Container gates (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File scripts/check_container.ps1 artifacts/preview_ffprobe.json
        shell: cmd

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qa-${{ matrix.os }}
          path: |
            artifacts/**
            out/preview_with_audio.mp4