name: Multi-Platform FastAPI-Style CI

on:
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Multi-platform lint and test
  lint-and-test:
    name: Lint & Test (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Node.js dependencies
        run: npm ci

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
        shell: bash

      - name: Code style check - isort
        run: |
          isort --check-only --diff src/
        shell: bash
        continue-on-error: true

      - name: Code style check - black
        run: |
          black --check --diff src/
        shell: bash
        continue-on-error: true

      - name: Lint Python - flake8
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        shell: bash
        continue-on-error: true

      - name: Lint JavaScript - ESLint (if available)
        run: |
          if [ -f "package.json" ] && npm list eslint --depth=0 2>/dev/null; then
            npm run lint --if-present
          else
            echo "ESLint not configured, skipping"
          fi
        shell: bash
        continue-on-error: true

      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2

      - name: Create required directories
        run: |
          mkdir -p out artifacts tests/reports coverage
        shell: bash

      - name: Run tests with coverage
        run: |
          npm test -- --ci --coverage --reporters=default --reporters=jest-junit --outputFile=tests/reports/junit.xml
        env:
          CI: true
          JEST_JUNIT_OUTPUT_DIR: tests/reports
          JEST_JUNIT_OUTPUT_NAME: junit.xml
        continue-on-error: true

      - name: Run golden tests (if available)
        run: |
          if [ -f "scripts/check_golden.js" ]; then
            node scripts/check_golden.js --junit tests/reports/golden.xml || echo "Golden tests failed or not available"
          fi
        shell: bash
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: |
            tests/reports/*.xml
            coverage/
          retention-days: 30

      - name: Upload coverage to artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.os }}
          path: coverage/
          retention-days: 7

  # Docker build and smoke test
  docker-build-smoke:
    name: Docker Build & Smoke Test
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Create Dockerfile for smoke test
        run: |
          cat > Dockerfile << 'EOF'
          FROM node:20-alpine
          
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production
          COPY . .
          
          # Add health check endpoint test
          RUN echo 'console.log("Health check: API server starting");' > health-check.js
          
          EXPOSE 5001
          CMD ["node", "src/api/index.js"]
          EOF

      - name: Build Docker image
        run: |
          docker build -t mobius-app:test .

      - name: Run container smoke test
        env:
          ALLOWED_TOKEN: ${{ secrets.ALLOWED_TOKEN || 'test-token' }}
        run: |
          # Start container in background
          docker run -d --name mobius-test -p 5001:5001 \
            -e NODE_ENV=test \
            -e ALLOWED_TOKEN="${ALLOWED_TOKEN}" \
            mobius-app:test
          
          # Wait for container to start
          sleep 10
          
          # Check if container is running
          docker ps | grep mobius-test
          
          # Try to hit health endpoint (basic connectivity test)
          timeout 30s bash -c 'until curl -f http://localhost:5001/ 2>/dev/null; do sleep 2; done' || echo "Health check timeout - service may not be ready"
          
          # Collect logs
          docker logs mobius-test > artifacts/container.log 2>&1 || echo "Could not collect logs"
          
          # Stop container
          docker stop mobius-test || true
          docker rm mobius-test || true

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Upload container artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-artifacts
          path: |
            artifacts/container.log
          retention-days: 7

  # Staging E2E (only runs on staging branch or staging PRs)
  staging-e2e:
    name: Staging E2E Smoke Test
    runs-on: ubuntu-latest
    needs: [docker-build-smoke]
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'staging')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create docker-compose for E2E
        run: |
          cat > docker-compose.e2e.yml << 'EOF'
          version: '3.8'
          services:
            mobius-api:
              build: .
              ports:
                - "5001:5001"
              environment:
                - NODE_ENV=staging
                - ALLOWED_TOKEN=${ALLOWED_TOKEN}
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:5001/"]
                interval: 30s
                timeout: 10s
                retries: 3
          EOF

      - name: Run staging E2E smoke test
        env:
          ALLOWED_TOKEN: ${{ secrets.ALLOWED_TOKEN || 'staging-test-token' }}
        run: |
          # Start services
          docker-compose -f docker-compose.e2e.yml up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Run E2E smoke tests
          echo "Running E2E smoke tests..."
          
          # Test API responsiveness
          curl -f http://localhost:5001/ || echo "API health check failed"
          
          # Collect service logs
          docker-compose -f docker-compose.e2e.yml logs > artifacts/e2e-logs.txt 2>&1
          
          # Cleanup
          docker-compose -f docker-compose.e2e.yml down

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Upload E2E artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-artifacts
          path: |
            artifacts/e2e-logs.txt
          retention-days: 7