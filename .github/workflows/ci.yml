name: CI

on:
  push:
  pull_request:

jobs:
  build-and-qa:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Network connectivity probe
        id: network-probe
        run: |
          # Run network probe and capture results
          mkdir -p artifacts/network
          if ./scripts/network-probe.sh artifacts/network; then
            echo "probe_result=success" >> $GITHUB_OUTPUT
            echo "✅ Network connectivity tests passed"
          else
            echo "probe_result=failed" >> $GITHUB_OUTPUT
            echo "⚠️ Network connectivity issues detected!"
            echo "See artifacts for details"
            # Don't fail the job, just mark as warning
          fi
        shell: bash
        continue-on-error: true

      - name: Upload network diagnostics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: network-diagnostics-${{ matrix.os }}
          path: |
            artifacts/network/network-probe.log
            artifacts/network/network-diagnostics.json
          retention-days: 7

      - name: Install deps
        run: npm ci

      - name: Ensure FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2

      - name: Install Python (Unix)
        if: runner.os != 'Windows'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
        shell: pwsh

      - name: Build
        run: npm run build --if-present

      - name: Unit tests
        run: npm test -- --ci --reporters=default

      - name: Render preview
        run: |
          mkdir -p out artifacts
          npm run render:preview # <- replace with your preview command
        shell: bash

      - name: Audio ebur128
        run: |
          ffmpeg -hide_banner -nostats -i out/preview_with_audio.mp4 -filter_complex ebur128 -f null - 2> artifacts/preview_with_audio_ebur128.txt
        shell: bash

      - name: Capture provenance (Unix)
        if: runner.os != 'Windows'
        run: bash scripts/capture_provenance.sh artifacts out/preview_with_audio.mp4
        shell: bash

      - name: Capture provenance (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File scripts/capture_provenance.ps1 artifacts out/preview_with_audio.mp4
        shell: cmd

      - name: Audio gates (Unix)
        if: runner.os != 'Windows'
        run: python3 scripts/check_audio_compliance.py artifacts/preview_with_audio_ebur128.txt
        shell: bash

      - name: Audio gates (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File scripts/check_audio_compliance.ps1 artifacts/preview_with_audio_ebur128.txt
        shell: cmd

      - name: Container gates (Unix)
        if: runner.os != 'Windows'
        run: bash scripts/check_container.sh artifacts/preview_ffprobe.json
        shell: bash

      - name: Container gates (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File scripts/check_container.ps1 artifacts/preview_ffprobe.json
        shell: cmd

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qa-${{ matrix.os }}
          path: |
            artifacts/**
            out/preview_with_audio.mp4
            
      - name: Comment on PR with network diagnostics
        if: github.event_name == 'pull_request' && steps.network-probe.outputs.probe_result == 'failed'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'artifacts/network/network-diagnostics.json';
            
            let diagnosticsContent = '⚠️ Network connectivity issues detected';
            
            if (fs.existsSync(path)) {
              try {
                const diagnostics = JSON.parse(fs.readFileSync(path, 'utf8'));
                const failed = diagnostics.summary.failed;
                const warnings = diagnostics.summary.warnings;
                
                diagnosticsContent = `## ⚠️ Network Connectivity Issues Detected
            
            **Summary:**
            - Failed endpoints: ${failed}
            - Warning endpoints: ${warnings}
            - Timestamp: ${diagnostics.timestamp}
            
            **Failed Endpoints:**
            ${diagnostics.results.filter(r => r.overall_status === 'failed')
              .map(r => `- **${r.name}** (${r.endpoint.host}): ${r.errors.join(', ')}`)
              .join('\n')}
            
            **Recommended Actions:**
            1. Check DNS resolution: \`dig +short ${diagnostics.results[0]?.endpoint.host}\`
            2. Verify firewall/egress rules for external API access
            3. Review network diagnostics in build artifacts
            
            For troubleshooting details, see the uploaded network-diagnostics artifacts.`;
                
              } catch (e) {
                console.error('Failed to parse diagnostics:', e);
              }
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: diagnosticsContent
            });