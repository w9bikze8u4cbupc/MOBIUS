name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  lint-and-test:
    name: Lint & Test (matrix)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node }}-

      - name: Install dependencies
        run: npm ci

      - name: Run lint (if present)
        run: npm run lint --if-present

      - name: Run tests (if present)
        run: npm test --if-present --passWithNoTests

      - name: Upload test artifacts (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ matrix.os }}
          path: |
            junit.xml
            coverage/lcov.info
            coverage/**

  build-and-qa:
    name: Build & QA (legacy)
    needs: lint-and-test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: Ensure FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2

      - name: Install Python (Unix)
        if: runner.os != 'Windows'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
        shell: pwsh

      - name: Build
        run: npm run build --if-present

      - name: Unit tests
        run: npm test --passWithNoTests -- --ci --reporters=default

      - name: Render preview
        run: |
          mkdir -p out artifacts
          npm run render:preview --if-present # <- replace with your preview command
        shell: bash
        continue-on-error: true

      - name: Audio ebur128
        run: |
          if [ -f "out/preview_with_audio.mp4" ]; then
            ffmpeg -hide_banner -nostats -i out/preview_with_audio.mp4 -filter_complex ebur128 -f null - 2> artifacts/preview_with_audio_ebur128.txt
          else
            echo "No preview file found, skipping audio analysis"
          fi
        shell: bash
        continue-on-error: true

      - name: Capture provenance (Unix)
        if: runner.os != 'Windows'
        run: |
          if [ -f "scripts/capture_provenance.sh" ] && [ -f "out/preview_with_audio.mp4" ]; then
            bash scripts/capture_provenance.sh artifacts out/preview_with_audio.mp4
          else
            echo "Skipping provenance capture - missing script or preview file"
          fi
        shell: bash
        continue-on-error: true

      - name: Capture provenance (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path "scripts/capture_provenance.ps1") {
            powershell -ExecutionPolicy Bypass -File scripts/capture_provenance.ps1 artifacts out/preview_with_audio.mp4
          } else {
            Write-Host "Skipping provenance capture - missing script"
          }
        shell: pwsh
        continue-on-error: true

      - name: Audio gates (Unix)
        if: runner.os != 'Windows'
        run: |
          if [ -f "scripts/check_audio_compliance.py" ] && [ -f "artifacts/preview_with_audio_ebur128.txt" ]; then
            python3 scripts/check_audio_compliance.py artifacts/preview_with_audio_ebur128.txt
          else
            echo "Skipping audio gates - missing script or ebur128 data"
          fi
        shell: bash
        continue-on-error: true

      - name: Audio gates (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path "scripts/check_audio_compliance.ps1") {
            powershell -ExecutionPolicy Bypass -File scripts/check_audio_compliance.ps1 artifacts/preview_with_audio_ebur128.txt
          } else {
            Write-Host "Skipping audio gates - missing script"
          }
        shell: pwsh
        continue-on-error: true

      - name: Container gates (Unix)
        if: runner.os != 'Windows'
        run: |
          if [ -f "scripts/check_container.sh" ] && [ -f "artifacts/preview_ffprobe.json" ]; then
            bash scripts/check_container.sh artifacts/preview_ffprobe.json
          else
            echo "Skipping container gates - missing script or ffprobe data"
          fi
        shell: bash
        continue-on-error: true

      - name: Container gates (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path "scripts/check_container.ps1") {
            powershell -ExecutionPolicy Bypass -File scripts/check_container.ps1 artifacts/preview_ffprobe.json
          } else {
            Write-Host "Skipping container gates - missing script"
          }
        shell: pwsh
        continue-on-error: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qa-${{ matrix.os }}
          path: |
            artifacts/**
            out/preview_with_audio.mp4

  api-smoke-tests:
    name: API smoke tests (containerized)
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose (if not present)
        run: |
          if ! command -v docker-compose >/dev/null 2>&1; then
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

      - name: Build CI API container
        run: |
          docker compose -f docker-compose.staging.yml build --progress=plain

      - name: Start CI API (detached)
        run: |
          docker compose -f docker-compose.staging.yml up -d api-ci

      - name: Run smoke test script (with retries and timeouts)
        id: run_smoke
        env:
          API_URL: http://localhost:5001
        run: |
          set -euo pipefail
          chmod +x ./scripts/ci/smoke-tests.sh
          ./scripts/ci/smoke-tests.sh "$API_URL" 30 2

      - name: Collect compose logs (always)
        if: always()
        run: |
          docker compose -f docker-compose.staging.yml logs --no-color > api-ci-compose.logs || true

      - name: Upload compose logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-ci-compose-logs
          path: api-ci-compose.logs

      - name: Teardown containers
        if: always()
        run: |
          docker compose -f docker-compose.staging.yml down -v --remove-orphans