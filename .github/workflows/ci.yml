name: CI

on:
  push:
  pull_request:

jobs:
  build-and-qa:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: Ensure FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2

      - name: Install Python (Unix)
        if: runner.os != 'Windows'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
        shell: pwsh

      - name: Build
        run: npm run build --if-present

      - name: Unit tests
        run: npm test -- --ci --reporters=default

      - name: Render preview
        run: |
          mkdir -p out artifacts
          npm run render:preview # <- replace with your preview command
        shell: bash

      - name: Audio ebur128
        run: |
          ffmpeg -hide_banner -nostats -i out/preview_with_audio.mp4 -filter_complex ebur128 -f null - 2> artifacts/preview_with_audio_ebur128.txt
        shell: bash

      - name: Capture provenance (Unix)
        if: runner.os != 'Windows'
        run: bash scripts/capture_provenance.sh artifacts out/preview_with_audio.mp4
        shell: bash

      - name: Capture provenance (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File scripts/capture_provenance.ps1 artifacts out/preview_with_audio.mp4
        shell: cmd

      - name: Audio gates (Unix)
        if: runner.os != 'Windows'
        run: python3 scripts/check_audio_compliance.py artifacts/preview_with_audio_ebur128.txt
        shell: bash

      - name: Audio gates (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File scripts/check_audio_compliance.ps1 artifacts/preview_with_audio_ebur128.txt
        shell: cmd

      - name: Container gates (Unix)
        if: runner.os != 'Windows'
        run: bash scripts/check_container.sh artifacts/preview_ffprobe.json
        shell: bash

      - name: Container gates (Windows)
        if: runner.os == 'Windows'
        run: powershell -ExecutionPolicy Bypass -File scripts/check_container.ps1 artifacts/preview_ffprobe.json
        shell: cmd

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qa-${{ matrix.os }}
          path: |
            artifacts/**
            out/preview_with_audio.mp4

  api-smoke-tests:
    name: API smoke tests (containerized)
    needs: build-and-qa
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build API container
        run: |
          docker compose -f docker-compose.staging.yml build --progress=plain --no-cache

      - name: Start API container (detached)
        run: |
          docker compose -f docker-compose.staging.yml up -d api

      - name: Wait for health check (30s timeout)
        id: wait_health
        run: |
          set -euo pipefail
          timeout=30
          start=$(date +%s)
          ok=false
          while [ $(( $(date +%s) - start )) -lt $timeout ]; do
            if docker compose -f docker-compose.staging.yml exec -T api sh -c "wget -q -O - http://localhost:5001/health" > /tmp/health.json 2>/dev/null; then
              echo "Health check response:"
              cat /tmp/health.json
              ok=true
              break
            fi
            echo "Waiting for API health..."
            sleep 2
          done
          if [ "$ok" != "true" ]; then
            echo "Health check did not become healthy within ${timeout}s"
            exit 1
          fi

      - name: Validate JSON response
        run: |
          set -euo pipefail
          docker compose -f docker-compose.staging.yml exec -T api sh -c "wget -q -O - http://localhost:5001/health" > /tmp/health.json
          jq -e '.status == "healthy" and .mode' /tmp/health.json

      - name: Collect compose logs (always)
        if: always()
        run: |
          docker compose -f docker-compose.staging.yml logs --no-color > api-compose.logs || true

      - name: Upload compose logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-compose-logs
          path: api-compose.logs

      - name: Teardown containers
        if: always()
        run: |
          docker compose -f docker-compose.staging.yml down -v --remove-orphans