name: CI

on:
  push:
    branches: [ main, staging, '**/feature/**' ]
  pull_request:
    branches: [ main, staging ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Lint & Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.11"
          - os: macos-latest
            python-version: "3.11"
          - os: windows-latest
            python-version: "3.11"
    env:
      ALLOWED_TOKEN: ${{ secrets.ALLOWED_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-asyncio requests websockets

      - name: Lint (black + flake8)
        run: |
          pip install black flake8
          black --check .
          flake8 .
        # Fail on lint errors; remove continue-on-error if you want strict enforcement
        continue-on-error: false

      - name: Run backend tests
        working-directory: backend
        run: |
          pytest -q --maxfail=1 --junitxml=results.xml test_api.py

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.os }}
          path: backend/results.xml

  docker-build-smoke:
    name: Docker build & smoke test
    needs: test
    runs-on: ubuntu-latest
    if: needs.test.result == 'success'
    env:
      ALLOWED_TOKEN: ${{ secrets.ALLOWED_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: mobius/backend:ci-${{ github.sha }}

      - name: Run backend container
        run: |
          docker run -d --name mobius-backend \
            -e ALLOWED_TOKEN="${ALLOWED_TOKEN}" \
            -p 8000:8000 \
            mobius/backend:ci-${{ github.sha }} \
            uvicorn main:app --host 0.0.0.0 --port 8000

      - name: Wait for /health (30s timeout)
        run: |
          for i in $(seq 1 30); do
            if curl -fsS http://localhost:8000/health >/dev/null 2>&1; then
              echo "backend healthy"
              exit 0
            fi
            sleep 1
          done
          echo "backend failed healthcheck" >&2
          docker logs mobius-backend || true
          exit 1

      - name: Basic smoke API call
        run: |
          curl -fS http://localhost:8000/health

      - name: Stop and remove container
        if: always()
        run: |
          docker stop mobius-backend || true
          docker rm mobius-backend || true