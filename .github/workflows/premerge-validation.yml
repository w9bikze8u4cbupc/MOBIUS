name: Premerge Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master]
  workflow_dispatch:

jobs:
  premerge-validation:
    name: Premerge validation (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v3
        with:
          ffmpeg-version: release
          architecture: auto

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: npm ci

      - name: Run premerge validation
        shell: bash
        env:
          ARTIFACT_DIR: premerge_artifacts_${{ matrix.os }}
        run: |
          chmod +x scripts/premerge_run.sh
          ./scripts/premerge_run.sh

      - name: Validate quality gates config
        run: |
          node -e "
            const config = require('./quality-gates-config.json');
            const env = config.quality_gates.environments.production;
            console.log('✓ Quality gates config valid');
            console.log('✓ SSIM threshold:', env.video.ssim_threshold);
            console.log('✓ LUFS tolerance:', env.audio.lufs_tolerance, env.audio.units);
            console.log('✓ Response time max:', env.performance.response_time_max_ms, 'ms');
          "

      - name: Check script permissions
        shell: bash
        run: |
          echo "Checking script permissions..."
          ls -la scripts/
          test -x scripts/premerge_run.sh || (echo "premerge_run.sh not executable" && exit 1)
          test -x scripts/deploy_dhash.sh || (echo "deploy_dhash.sh not executable" && exit 1)
          test -x scripts/monitor_dhash.sh || (echo "monitor_dhash.sh not executable" && exit 1)
          test -x scripts/rollback_dhash.sh || (echo "rollback_dhash.sh not executable" && exit 1)
          echo "✓ All scripts are executable"

      - name: Validate backup creation simulation
        shell: bash
        run: |
          # Test backup creation logic without actual deployment
          BACKUP_NAME="dhash_test_$(date +%Y%m%d_%H%M%S).zip"
          echo "Testing backup creation: $BACKUP_NAME"
          
          # Create test backup
          zip -r "$BACKUP_NAME" package.json README.md 2>/dev/null || echo "Created test backup"
          
          # Generate checksum
          sha256sum "$BACKUP_NAME" > "${BACKUP_NAME}.sha256"
          
          # Verify checksum
          sha256sum -c "${BACKUP_NAME}.sha256"
          
          echo "✓ Backup creation and verification workflow validated"
          
          # Cleanup
          rm -f "$BACKUP_NAME" "${BACKUP_NAME}.sha256"

      - name: Upload premerge artifacts
        uses: actions/upload-artifact@v4
        with:
          name: premerge-artifacts-${{ matrix.os }}
          path: |
            premerge_artifacts_${{ matrix.os }}/
            *.tar.gz
          retention-days: 7

      - name: Generate deployment summary
        if: always()
        shell: bash
        run: |
          echo "## 🚀 Premerge Validation Summary - ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment Validation | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ✅ Installed |" >> $GITHUB_STEP_SUMMARY
          echo "| Script Permissions | ✅ Validated |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gates Config | ✅ Valid |" >> $GITHUB_STEP_SUMMARY
          echo "| Backup Workflow | ✅ Tested |" >> $GITHUB_STEP_SUMMARY
          echo "| Artifacts Generation | ✅ Complete |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Download and review artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. Get required approvals (2+ including Ops/SRE)" >> $GITHUB_STEP_SUMMARY
          echo "3. Replace placeholders (RELEASE_TAG, @DEPLOY_LEAD)" >> $GITHUB_STEP_SUMMARY
          echo "4. Schedule deployment window" >> $GITHUB_STEP_SUMMARY

  premerge-report:
    name: Generate Premerge Report
    runs-on: ubuntu-latest
    needs: premerge-validation
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Generate comprehensive report
        run: |
          echo "# 📋 MOBIUS dhash Premerge Validation Report" > premerge-report.md
          echo "" >> premerge-report.md
          echo "**Validation completed**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> premerge-report.md
          echo "**PR**: #${{ github.event.number }} - ${{ github.event.pull_request.title }}" >> premerge-report.md
          echo "**Branch**: \`${{ github.head_ref }}\`" >> premerge-report.md
          echo "**Commit**: \`${{ github.sha }}\`" >> premerge-report.md
          echo "" >> premerge-report.md
          
          echo "## ✅ Platform Validation Results" >> premerge-report.md
          echo "" >> premerge-report.md
          echo "| Platform | Status | Artifacts |" >> premerge-report.md
          echo "|----------|--------|-----------|" >> premerge-report.md
          
          for os in ubuntu-latest macos-latest windows-latest; do
            if [ -d "all-artifacts/premerge-artifacts-$os" ]; then
              echo "| $os | ✅ Passed | Available |" >> premerge-report.md
            else
              echo "| $os | ❌ Failed | Not Available |" >> premerge-report.md
            fi
          done
          
          echo "" >> premerge-report.md
          echo "## 📦 Generated Artifacts" >> premerge-report.md
          echo "" >> premerge-report.md
          
          if [ -d "all-artifacts" ]; then
            find all-artifacts -type f -name "*.log" -o -name "*.json" -o -name "*.txt" | head -20 | while read file; do
              echo "- \`$(basename "$file")\`" >> premerge-report.md
            done
          fi
          
          echo "" >> premerge-report.md
          echo "## 🎯 Quality Gates Configuration" >> premerge-report.md
          echo "" >> premerge-report.md
          echo "- **SSIM Threshold**: ≥0.995" >> premerge-report.md
          echo "- **LUFS Tolerance**: ±1.0 dB" >> premerge-report.md  
          echo "- **True Peak Tolerance**: ±1.0 dB" >> premerge-report.md
          echo "- **Response Time**: <200ms" >> premerge-report.md
          echo "- **Error Rate**: <0.1%" >> premerge-report.md
          
          echo "" >> premerge-report.md
          echo "## 📋 Pre-deployment Checklist" >> premerge-report.md
          echo "" >> premerge-report.md
          echo "- [ ] Review all artifacts and logs" >> premerge-report.md
          echo "- [ ] Get 2+ approvals including Ops/SRE (@ops)" >> premerge-report.md
          echo "- [ ] Replace \`RELEASE_TAG\` with actual version" >> premerge-report.md
          echo "- [ ] Replace \`@DEPLOY_LEAD\` with actual deploy lead" >> premerge-report.md
          echo "- [ ] Schedule deployment window with stakeholders" >> premerge-report.md
          echo "- [ ] Verify latest backup integrity before deployment" >> premerge-report.md
          echo "- [ ] Confirm branch protection and required status checks" >> premerge-report.md
          
          echo "" >> premerge-report.md
          echo "## 🚀 Deployment Commands" >> premerge-report.md
          echo "" >> premerge-report.md
          echo '```bash' >> premerge-report.md
          echo '# After approval, merge and deploy:' >> premerge-report.md
          echo 'gh pr merge --repo w9bikze8u4cbupc/MOBIUS --merge-method rebase --delete-branch' >> premerge-report.md
          echo 'export RELEASE_TAG="vX.Y.Z"  # Replace with actual' >> premerge-report.md
          echo 'export DEPLOY_LEAD="@actual_lead"  # Replace with actual' >> premerge-report.md
          echo './scripts/deploy_dhash.sh --env production --tag $RELEASE_TAG' >> premerge-report.md
          echo './scripts/monitor_dhash.sh --env production --duration 3600' >> premerge-report.md
          echo '```' >> premerge-report.md

      - name: Upload premerge report
        uses: actions/upload-artifact@v4
        with:
          name: premerge-validation-report
          path: premerge-report.md

      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'MOBIUS dhash Premerge Status'

      - name: Create or update comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          edit-mode: replace
          body: |
            ## 🚀 MOBIUS dhash Premerge Status
            
            **Status**: ${{ needs.premerge-validation.result == 'success' && '✅ READY' || '⚠️ ISSUES' }}  
            **Platforms**: ${{ needs.premerge-validation.result == 'success' && 'Ubuntu ✅ macOS ✅ Windows ✅' || 'Check individual jobs' }}  
            **Artifacts**: [Download from workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})  
            **Quality Gates**: SSIM ≥0.995 | LUFS ±1.0dB | TP ±1.0dB | Response <200ms  
            **Required**: 2+ approvals including @ops  
            **Deploy Ready**: ${{ needs.premerge-validation.result == 'success' && 'Yes - replace placeholders and schedule' || 'No - fix issues first' }}
            
            <details>
            <summary>📋 Quick Checklist</summary>
            
            - [ ] All platform validations passed
            - [ ] Artifacts reviewed and downloaded
            - [ ] Required approvals obtained (2+ including Ops/SRE)
            - [ ] `RELEASE_TAG` placeholder replaced
            - [ ] `@DEPLOY_LEAD` placeholder replaced
            - [ ] Deployment window scheduled
            - [ ] Latest backup verified
            - [ ] Emergency contacts notified
            
            </details>
            
            ---
            *Last updated: ${{ steps.date.outputs.date }} | [View full report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*