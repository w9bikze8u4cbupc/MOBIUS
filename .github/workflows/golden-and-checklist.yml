name: golden-and-checklist
on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022, macos-14, ubuntu-22.04]
        game: [sushi-go]
    steps:
      - uses: actions/checkout@v4

      - name: Echo environment versions
        run: |
          echo "OS/Tools:"
          uname -a || true
          sw_vers || true
          node -v
          ffmpeg -version | head -n1
          ffprobe -version | head -n1

      - uses: actions/setup-node@v4
        with:
          node-version: '20.14.0'

      - name: Install ffmpeg
        if: runner.os == 'Windows'
        run: choco install -y ffmpeg --version 8.0
      - name: Install ffmpeg
        if: runner.os == 'macOS'
        run: |
          HOMEBREW_NO_AUTO_UPDATE=1 brew install ffmpeg
      - name: Install ffmpeg
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Prepare assets
        run: |
          mkdir -p dist/${{ matrix.game }}/${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}
          cp tests/assets/${{ matrix.game }}/tutorial.mp4 dist/${{ matrix.game }}/${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}/tutorial.mp4

      - name: ffprobe source video
        run: |
          ffprobe -v error -select_streams v:0 \
            -show_entries stream=width,height,avg_frame_rate,r_frame_rate,pix_fmt,sample_aspect_ratio \
            -of json dist/${{ matrix.game }}/${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}/tutorial.mp4 > artifacts/${{ matrix.game }}-${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}-ffprobe.json

      - run: npm ci

      - name: Generate container.json
        run: node scripts/generate_container_json.cjs
        env:
          GAME: ${{ matrix.game }}
          RUNNER_OS: ${{ runner.os }}

      - name: Extract frames
        run: >
          ffmpeg -y -i dist/${{ matrix.game }}/${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}/tutorial.mp4
          -vf fps=1,format=rgba -vsync 0
          tests/golden/${{ matrix.game }}/${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}/frames/%06d.png

      - name: Print directories and frame counts
        run: |
          echo "RUNNER_OS=$RUNNER_OS, platform=${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}"
          echo "Container exists?" && test -f tests/golden/${{ matrix.game }}/${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}/container.json && echo yes || echo no

      - name: Count golden frames (cross-platform)
        run: |
          node -e "const fs=require('fs');const p=`tests/golden/sushi-go/${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}/frames`;console.log(fs.existsSync(p)?fs.readdirSync(p).filter(f=>!f.startsWith('.')).length:0)"

      - name: Validate container.json
        run: node scripts/validate_container_json.cjs "tests/golden/${{ matrix.game }}/${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}/container.json"

      - name: Compare ffprobe vs container.json
        run: node scripts/compare_ffprobe_vs_container.cjs "artifacts/${{ matrix.game }}-${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}-ffprobe.json" "tests/golden/${{ matrix.game }}/${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}/container.json"

      - name: Golden check
        run: node scripts/check_golden.cjs --perOs | tee "${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}_golden.log"
        env:
          GAME: ${{ matrix.game }}
          SSIM_MIN: '0.95'

      - name: Show golden check summary
        run: grep -E "Resolved|golden dir|frames dir|SSIM" "${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}_golden.log" || true

      - name: Checklist
        run: node scripts/ci/validate_mobius_checklist.cjs --game ${{ matrix.game }}
        env:
          PLATFORM: ${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}

      - name: Show JUnit head (if exists)
        run: |
          node -e "const fs=require('fs'),path=require('path');const d='tests/golden/reports';if(fs.existsSync(d)){for(const f of fs.readdirSync(d)){if(f.endsWith('.xml')){console.log('---',f,'---');console.log(fs.readFileSync(path.join(d,f),'utf8').split('\n').slice(0,40).join('\n'));}}}"

      - name: Upload JUnit and artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-and-diffs-${{ matrix.os }}-${{ matrix.game }}
          path: |
            artifacts/${{ matrix.game }}-${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}-ffprobe.json
            tests/golden/reports/**/*.xml
            tests/golden/${{ matrix.game }}/**/debug/**
            tests/golden/${{ matrix.game }}/**/frames/**
            ${{ runner.os == 'Windows' && 'windows' || runner.os == 'macOS' && 'macos' || 'linux' }}_golden.log