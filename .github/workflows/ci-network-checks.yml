name: CI with Network Checks

on:
  push:
  pull_request:

jobs:
  network-checks:
    name: Network Connectivity Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Network Probe
        run: |
          # Run network probe early to detect connectivity issues
          ./scripts/network-probe.sh --output network-probe-results.log --verbose
        continue-on-error: true

      - name: Upload Network Probe Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: network-probe-results
          path: |
            network-probe-results.log
            probe-results.log
          if-no-files-found: ignore

      - name: Run Network Diagnostics
        run: |
          # Run comprehensive network diagnostics
          ./scripts/network-diagnostics.sh --format text --output network-diagnostics.log
        continue-on-error: true

      - name: Upload Network Diagnostics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: network-diagnostics
          path: |
            network-diagnostics.log
          if-no-files-found: ignore

      - name: Test Blocked Endpoints
        run: |
          # Test critical endpoints for debugging
          ./scripts/reproduce-blocked-endpoints.sh --output blocked-endpoints-debug
        continue-on-error: true

      - name: Upload Blocked Endpoints Debug
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: blocked-endpoints-debug
          path: blocked-endpoints-debug/
          if-no-files-found: ignore

  build-and-qa:
    needs: network-checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: Install client deps
        run: |
          cd client
          npm ci

      - name: Ensure FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2

      - name: Install Python (Unix)
        if: runner.os != 'Windows'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
        shell: pwsh

      - name: Build client
        run: |
          cd client
          npm run build

      - name: Build
        run: npm run build --if-present

      - name: Unit tests
        run: npm test -- --ci --reporters=default --passWithNoTests

      - name: Client tests
        run: |
          cd client
          npm test -- --ci --watchAll=false --passWithNoTests

      - name: Network Health Check
        run: |
          # Quick network health check before resource-intensive operations
          ./scripts/network-probe.sh --timeout 5 --output quick-network-check.log || echo "Network issues detected"
        continue-on-error: true

      - name: Render preview
        run: |
          mkdir -p out artifacts
          npm run render:preview # <- replace with your preview command
        shell: bash
        continue-on-error: true

      - name: Audio ebur128
        if: success() || failure()
        run: |
          if [ -f "out/preview_with_audio.mp4" ]; then
            ffmpeg -hide_banner -nostats -i out/preview_with_audio.mp4 -filter_complex ebur128 -f null - 2> artifacts/preview_with_audio_ebur128.txt
          else
            echo "Preview file not found, skipping audio analysis"
          fi
        shell: bash
        continue-on-error: true

      - name: Capture provenance (Unix)
        if: runner.os != 'Windows'
        run: |
          if [ -f "out/preview_with_audio.mp4" ]; then
            bash scripts/capture_provenance.sh artifacts out/preview_with_audio.mp4
          fi
        shell: bash
        continue-on-error: true

      - name: Capture provenance (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path "out/preview_with_audio.mp4") {
            powershell -ExecutionPolicy Bypass -File scripts/capture_provenance.ps1 artifacts out/preview_with_audio.mp4
          }
        shell: pwsh
        continue-on-error: true

      - name: Audio gates (Unix)
        if: runner.os != 'Windows'
        run: |
          if [ -f "artifacts/preview_with_audio_ebur128.txt" ]; then
            python3 scripts/check_audio_compliance.py artifacts/preview_with_audio_ebur128.txt
          fi
        shell: bash
        continue-on-error: true

      - name: Audio gates (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path "artifacts/preview_with_audio_ebur128.txt") {
            powershell -ExecutionPolicy Bypass -File scripts/check_audio_compliance.ps1 artifacts/preview_with_audio_ebur128.txt
          }
        shell: pwsh
        continue-on-error: true

      - name: Container gates (Unix)
        if: runner.os != 'Windows'
        run: |
          if [ -f "artifacts/preview_ffprobe.json" ]; then
            bash scripts/check_container.sh artifacts/preview_ffprobe.json
          fi
        shell: bash
        continue-on-error: true

      - name: Container gates (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Test-Path "artifacts/preview_ffprobe.json") {
            powershell -ExecutionPolicy Bypass -File scripts/check_container.ps1 artifacts/preview_ffprobe.json
          }
        shell: pwsh
        continue-on-error: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: qa-${{ matrix.os }}
          path: |
            artifacts/**
            out/preview_with_audio.mp4
            quick-network-check.log
          if-no-files-found: ignore

  golden-checks:
    needs: [network-checks, build-and-qa]
    name: Golden checks (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install FFmpeg (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install FFmpeg (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ffmpeg

      - name: Install FFmpeg (Windows)
        if: runner.os == 'Windows'
        run: choco install ffmpeg -y --no-progress

      - name: Verify FFmpeg
        run: |
          ffmpeg -version
          ffprobe -version

      - name: Install dependencies
        run: npm ci

      - name: Render previews (replace with your real commands)
        run: |
          # Replace these with your actual rendering steps
          # Use || true if some games are not always rendered
          npm run render:proxy || true

      - name: Run golden checks with JUnit
        env:
          GOLDEN_PER_OS: "1"
        run: |
          mkdir -p tests/golden/reports
          node scripts/check_golden.js --game hanamikoji --perOs --junit "tests/golden/reports/junit-${{ runner.os }}-hanamikoji.xml" || true

      - name: Upload JUnit + debug diffs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: golden-reports-and-diffs-${{ matrix.os }}
          path: |
            tests/golden/**/debug/**
            tests/golden/reports/*.xml
          if-no-files-found: ignore